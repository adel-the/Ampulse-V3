/**
 * DIAGNOSTIC: Probl√®me potentiel avec les IDs temporaires
 * 
 * V√©rification si Date.now() peut causer des collisions d'IDs
 * qui pourraient emp√™cher l'affichage correct des t√¢ches optimistes
 */

console.log('=== DIAGNOSTIC IDS TEMPORAIRES ===\n');

// Simulation de cr√©ation rapide de plusieurs t√¢ches
console.log('üîç Test de collision d\'IDs avec Date.now():');

const ids = [];
for (let i = 0; i < 10; i++) {
  const id = Date.now();
  ids.push(id);
  // Attendre un petit peu pour voir la diff√©rence
  if (i < 9) {
    const start = Date.now();
    while (Date.now() - start < 1) {
      // Attendre 1ms
    }
  }
}

console.log('IDs g√©n√©r√©s:', ids);
console.log('IDs uniques:', new Set(ids).size);
console.log('Collisions d√©tect√©es:', ids.length !== new Set(ids).size ? '‚ùå OUI' : '‚úÖ NON');

// Test de collision avec des vraies t√¢ches
console.log('\nüß™ Simulation collision avec t√¢ches existantes:');

// Supposons des t√¢ches existantes avec des IDs r√©alistes
const existingTasks = [
  { id: 1, titre: "T√¢che 1" },
  { id: 2, titre: "T√¢che 2" },
  { id: 3, titre: "T√¢che 3" },
  { id: 1756833663140, titre: "T√¢che avec timestamp" } // ID d√©j√† utilis√©
];

const newOptimisticId = 1756833663140; // M√™me timestamp par co√Øncidence
console.log(`Nouvel ID optimiste: ${newOptimisticId}`);
console.log(`ID existe d√©j√†: ${existingTasks.some(t => t.id === newOptimisticId) ? '‚ùå OUI' : '‚úÖ NON'}`);

if (existingTasks.some(t => t.id === newOptimisticId)) {
  console.log('‚ö†Ô∏è COLLISION D√âTECT√âE!');
  console.log('Cons√©quences possibles:');
  console.log('- La t√¢che optimiste peut √©craser une t√¢che existante');
  console.log('- React peut ignorer la mise √† jour √† cause de la m√™me cl√©');
  console.log('- La t√¢che peut sembler "dispara√Ætre" √† cause du conflit');
}

console.log('\nüîß Solutions pour √©viter les collisions:');
console.log('1. Utiliser crypto.randomUUID() pour des IDs vraiment uniques');
console.log('2. Utiliser un pr√©fixe "temp_" + Date.now() + Math.random()');
console.log('3. Utiliser un compteur n√©gatif d√©croissant (-1, -2, -3...)');
console.log('4. Utiliser Symbol() pour des IDs garantis uniques');

// Test des diff√©rentes approches
console.log('\nüìä Comparaison des m√©thodes:');

// M√©thode 1: crypto.randomUUID (si disponible)
if (typeof crypto !== 'undefined' && crypto.randomUUID) {
  console.log('UUID:', crypto.randomUUID());
} else {
  console.log('UUID: Non disponible dans cet environnement');
}

// M√©thode 2: Pr√©fixe + timestamp + random
const method2 = `temp_${Date.now()}_${Math.floor(Math.random() * 10000)}`;
console.log('Pr√©fixe + timestamp + random:', method2);

// M√©thode 3: Compteur n√©gatif
let negativeCounter = -1;
console.log('Compteur n√©gatif:', negativeCounter--);
console.log('Compteur n√©gatif suivant:', negativeCounter--);

// M√©thode 4: Timestamp avec microsecondes simul√©es
const method4 = Date.now() * 1000 + Math.floor(Math.random() * 1000);
console.log('Timestamp avec microsecondes:', method4);

console.log('\n‚úÖ RECOMMANDATION:');
console.log('Remplacer Date.now() par une m√©thode plus robuste:');
console.log('```javascript');
console.log('// Au lieu de:');
console.log('id: Date.now()');
console.log('');
console.log('// Utiliser:');
console.log('id: `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`');
console.log('// ou simplement:');
console.log('id: -Date.now() // ID n√©gatif pour √©viter les conflits');
console.log('```');

console.log('\nüéØ AUTRES V√âRIFICATIONS:');
console.log('1. V√©rifier si les t√¢ches existantes ont des IDs dans la plage Date.now()');
console.log('2. Ajouter une validation des IDs uniques dans le setState');
console.log('3. Utiliser React Developer Tools pour v√©rifier les cl√©s des √©l√©ments');
console.log('4. Tester la cr√©ation rapide de plusieurs t√¢ches cons√©cutives');