// Script pour d√©boguer c√¥t√© client - √† ex√©cuter dans la console du navigateur

// Fonction pour tester la cr√©ation de t√¢ches c√¥t√© client
async function testClientSideCreation() {
  console.log('üîß Test cr√©ation t√¢che c√¥t√© client...');
  
  // Simuler les donn√©es du formulaire MaintenanceManagement
  const taskData = {
    titre: 'Test CLIENT DEBUG',
    description: 'Test depuis console navigateur',
    priorite: 'moyenne', // Note: le composant utilise 'moyenne' mais mappe vers 'moyenne'
    responsable: 'User Test',
    date_echeance: '2025-09-05',
    notes: 'Debug client side',
    room_id: 2 // ID d'une chambre existante
  };
  
  console.log('üìù Donn√©es √† cr√©er:', taskData);
  
  // Test de la fonction de validation
  const validateTaskData = (taskData) => {
    const errors = [];
    
    // Required field validations
    if (!taskData.titre?.trim()) {
      errors.push('Le titre est requis');
    }
    if (!taskData.room_id) {
      errors.push('L\'ID de la chambre est requis');
    }
    
    // Priority validation
    const validPriorities = ['faible', 'moyenne', 'haute', 'urgente'];
    if (taskData.priorite && !validPriorities.includes(taskData.priorite)) {
      errors.push('Priorit√© invalide');
    }
    
    // Status validation
    const validStatuses = ['en_attente', 'en_cours', 'terminee', 'annulee'];
    if (taskData.statut && !validStatuses.includes(taskData.statut)) {
      errors.push('Statut invalide');
    }
    
    // Date validation
    if (taskData.date_echeance) {
      const echeanceDate = new Date(taskData.date_echeance);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      if (isNaN(echeanceDate.getTime())) {
        errors.push('Date d\'√©ch√©ance invalide');
      } else if (echeanceDate < today) {
        errors.push('La date d\'√©ch√©ance ne peut pas √™tre dans le pass√©');
      }
    }
    
    return {
      isValid: errors.length === 0,
      errors
    };
  };
  
  const validation = validateTaskData(taskData);
  console.log('‚úÖ Validation:', validation);
  
  if (!validation.isValid) {
    console.error('‚ùå Erreurs de validation:', validation.errors);
    return;
  }
  
  // Test du mapping de priorit√© comme dans le code
  const priorityMapping = {
    'basse': 'faible',
    'moyenne': 'moyenne', 
    'haute': 'haute',
    'critique': 'urgente'
  };
  
  const mappedData = {
    ...taskData,
    priorite: priorityMapping[taskData.priorite] || 'moyenne'
  };
  
  console.log('üìù Donn√©es apr√®s mapping:', mappedData);
  
  // Test d'acc√®s aux variables d'environnement c√¥t√© client
  console.log('üîß Variables d\'environnement:');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL || 'Non d√©finie');
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'D√©finie' : 'Non d√©finie');
  
  return mappedData;
}

// Instructions d'utilisation
console.log(`
üîß INSTRUCTIONS DE DEBUG:

1. Ouvrir l'application dans le navigateur
2. Aller sur la page Maintenance 
3. Ouvrir la console (F12)
4. Coller et ex√©cuter: testClientSideCreation()
5. Observer les erreurs/r√©sultats

Ensuite, pour tester la vraie cr√©ation de t√¢che:
1. Ouvrir l'inspecteur R√©seau (Network)
2. Essayer de cr√©er une t√¢che via l'interface
3. Observer si des requ√™tes POST sont envoy√©es
4. V√©rifier les erreurs JavaScript dans la console

Si aucune requ√™te POST n'appara√Æt, le probl√®me est dans le JavaScript client.
Si une requ√™te POST appara√Æt mais √©choue, le probl√®me est dans la communication avec l'API.
`);

// Exposer la fonction globalement pour utilisation dans la console
if (typeof window !== 'undefined') {
  window.testClientSideCreation = testClientSideCreation;
}