-- ====================================
-- SCRIPT RLS (ROW LEVEL SECURITY) 
-- SoliReserve Enhanced - Politiques de sécurité
-- ====================================

-- ====================================
-- 1. ACTIVATION DE RLS SUR TOUTES LES TABLES
-- ====================================

ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.hotels ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.room_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.rooms ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.operateurs_sociaux ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.usagers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.conventions_prix ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reservations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.processus_reservations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.conversations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.document_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- ====================================
-- 2. FONCTIONS HELPER POUR RLS
-- ====================================

-- Fonction pour récupérer l'ID utilisateur authentifié
CREATE OR REPLACE FUNCTION auth.uid() RETURNS UUID AS $$
SELECT COALESCE(
    current_setting('request.jwt.claim.sub', true)::UUID,
    (current_setting('request.jwt.claims', true)::JSONB ->> 'sub')::UUID
);
$$ LANGUAGE SQL STABLE;

-- Fonction pour récupérer le rôle de l'utilisateur
CREATE OR REPLACE FUNCTION get_user_role() RETURNS TEXT AS $$
DECLARE
    user_role TEXT;
BEGIN
    SELECT role INTO user_role 
    FROM public.users 
    WHERE id = auth.uid();
    
    RETURN COALESCE(user_role, 'anonymous');
END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER;

-- Fonction pour récupérer l'hôtel de l'utilisateur
CREATE OR REPLACE FUNCTION get_user_hotel_id() RETURNS BIGINT AS $$
DECLARE
    user_hotel_id BIGINT;
BEGIN
    SELECT hotel_id INTO user_hotel_id 
    FROM public.users 
    WHERE id = auth.uid();
    
    RETURN user_hotel_id;
END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER;

-- Fonction pour vérifier si l'utilisateur est admin
CREATE OR REPLACE FUNCTION is_admin() RETURNS BOOLEAN AS $$
BEGIN
    RETURN get_user_role() = 'admin';
END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER;

-- Fonction pour vérifier si l'utilisateur peut gérer l'hôtel
CREATE OR REPLACE FUNCTION can_manage_hotel(hotel_id_param BIGINT) RETURNS BOOLEAN AS $$
DECLARE
    user_role TEXT;
    user_hotel_id BIGINT;
BEGIN
    SELECT role, hotel_id INTO user_role, user_hotel_id 
    FROM public.users 
    WHERE id = auth.uid();
    
    -- Admin peut tout gérer
    IF user_role = 'admin' THEN
        RETURN true;
    END IF;
    
    -- Manager/comptable peuvent gérer leur hôtel
    IF user_role IN ('manager', 'comptable') AND user_hotel_id = hotel_id_param THEN
        RETURN true;
    END IF;
    
    RETURN false;
END;
$$ LANGUAGE plpgsql STABLE SECURITY DEFINER;

-- ====================================
-- 3. POLITIQUES RLS POUR USERS
-- ====================================

-- Les utilisateurs peuvent voir leur propre profil
CREATE POLICY "Users can view own profile" ON public.users
    FOR SELECT
    USING (auth.uid() = id);

-- Les admins peuvent voir tous les utilisateurs
CREATE POLICY "Admins can view all users" ON public.users
    FOR SELECT
    USING (is_admin());

-- Les managers peuvent voir les utilisateurs de leur hôtel
CREATE POLICY "Managers can view hotel users" ON public.users
    FOR SELECT
    USING (
        get_user_role() = 'manager' 
        AND hotel_id = get_user_hotel_id()
    );

-- Les utilisateurs peuvent mettre à jour leur profil
CREATE POLICY "Users can update own profile" ON public.users
    FOR UPDATE
    USING (auth.uid() = id);

-- Les admins peuvent tout faire sur les utilisateurs
CREATE POLICY "Admins can manage all users" ON public.users
    FOR ALL
    USING (is_admin());

-- ====================================
-- 4. POLITIQUES RLS POUR HOTELS
-- ====================================

-- Tous peuvent voir les hôtels actifs (pour la sélection)
CREATE POLICY "Anyone can view active hotels" ON public.hotels
    FOR SELECT
    USING (statut = 'ACTIF' AND is_active = true);

-- Les utilisateurs peuvent voir leur hôtel
CREATE POLICY "Users can view own hotel" ON public.hotels
    FOR SELECT
    USING (id = get_user_hotel_id());

-- Les admins peuvent tout faire sur les hôtels
CREATE POLICY "Admins can manage all hotels" ON public.hotels
    FOR ALL
    USING (is_admin());

-- Les managers peuvent modifier leur hôtel
CREATE POLICY "Managers can update own hotel" ON public.hotels
    FOR UPDATE
    USING (
        get_user_role() IN ('manager', 'comptable')
        AND id = get_user_hotel_id()
    );

-- ====================================
-- 5. POLITIQUES RLS POUR ROOM_CATEGORIES
-- ====================================

-- Lecture basée sur l'hôtel
CREATE POLICY "Hotel staff can view own categories" ON public.room_categories
    FOR SELECT
    USING (can_manage_hotel(hotel_id));

-- Admins peuvent tout faire
CREATE POLICY "Admins can manage all categories" ON public.room_categories
    FOR ALL
    USING (is_admin());

-- Managers peuvent gérer les catégories de leur hôtel
CREATE POLICY "Managers can manage own hotel categories" ON public.room_categories
    FOR ALL
    USING (
        get_user_role() = 'manager'
        AND hotel_id = get_user_hotel_id()
    );

-- ====================================
-- 6. POLITIQUES RLS POUR ROOMS
-- ====================================

-- Lecture basée sur l'hôtel
CREATE POLICY "Hotel staff can view own rooms" ON public.rooms
    FOR SELECT
    USING (can_manage_hotel(hotel_id));

-- Opérateurs peuvent voir les chambres disponibles
CREATE POLICY "Operators can view available rooms" ON public.rooms
    FOR SELECT
    USING (statut = 'disponible');

-- Admins peuvent tout faire
CREATE POLICY "Admins can manage all rooms" ON public.rooms
    FOR ALL
    USING (is_admin());

-- Managers et réceptionnistes peuvent gérer les chambres de leur hôtel
CREATE POLICY "Hotel staff can manage own rooms" ON public.rooms
    FOR ALL
    USING (
        get_user_role() IN ('manager', 'receptionniste')
        AND hotel_id = get_user_hotel_id()
    );

-- ====================================
-- 7. POLITIQUES RLS POUR OPERATEURS_SOCIAUX
-- ====================================

-- Tous les utilisateurs connectés peuvent voir les opérateurs actifs
CREATE POLICY "Authenticated users can view active operators" ON public.operateurs_sociaux
    FOR SELECT
    USING (
        auth.uid() IS NOT NULL 
        AND statut = 'actif'
    );

-- Admins peuvent tout faire
CREATE POLICY "Admins can manage all operators" ON public.operateurs_sociaux
    FOR ALL
    USING (is_admin());

-- Les opérateurs peuvent voir et modifier leur propre profil
-- (Nécessite une table de liaison operateur-user pour l'authentification)

-- ====================================
-- 8. POLITIQUES RLS POUR CLIENTS/USAGERS
-- ====================================

-- Les utilisateurs connectés peuvent voir les clients
CREATE POLICY "Authenticated users can view clients" ON public.clients
    FOR SELECT
    USING (auth.uid() IS NOT NULL);

-- Admins peuvent tout faire
CREATE POLICY "Admins can manage all clients" ON public.clients
    FOR ALL
    USING (is_admin());

-- Réceptionnistes et managers peuvent gérer les clients
CREATE POLICY "Hotel staff can manage clients" ON public.clients
    FOR ALL
    USING (get_user_role() IN ('manager', 'receptionniste', 'comptable'));

-- Mêmes politiques pour usagers
CREATE POLICY "Authenticated users can view usagers" ON public.usagers
    FOR SELECT
    USING (auth.uid() IS NOT NULL);

CREATE POLICY "Admins can manage all usagers" ON public.usagers
    FOR ALL
    USING (is_admin());

CREATE POLICY "Hotel staff can manage usagers" ON public.usagers
    FOR ALL
    USING (get_user_role() IN ('manager', 'receptionniste', 'comptable'));

-- ====================================
-- 9. POLITIQUES RLS POUR CONVENTIONS_PRIX
-- ====================================

-- Les utilisateurs peuvent voir les conventions de leur hôtel
CREATE POLICY "Hotel staff can view own conventions" ON public.conventions_prix
    FOR SELECT
    USING (can_manage_hotel(hotel_id));

-- Admins peuvent tout faire
CREATE POLICY "Admins can manage all conventions" ON public.conventions_prix
    FOR ALL
    USING (is_admin());

-- Managers et comptables peuvent gérer les conventions de leur hôtel
CREATE POLICY "Hotel staff can manage own conventions" ON public.conventions_prix
    FOR ALL
    USING (
        get_user_role() IN ('manager', 'comptable')
        AND hotel_id = get_user_hotel_id()
    );

-- ====================================
-- 10. POLITIQUES RLS POUR RESERVATIONS
-- ====================================

-- Les utilisateurs peuvent voir les réservations de leur hôtel
CREATE POLICY "Hotel staff can view own reservations" ON public.reservations
    FOR SELECT
    USING (can_manage_hotel(hotel_id));

-- Admins peuvent tout faire
CREATE POLICY "Admins can manage all reservations" ON public.reservations
    FOR ALL
    USING (is_admin());

-- Le personnel de l'hôtel peut gérer les réservations
CREATE POLICY "Hotel staff can manage own reservations" ON public.reservations
    FOR ALL
    USING (
        get_user_role() IN ('manager', 'receptionniste', 'comptable')
        AND hotel_id = get_user_hotel_id()
    );

-- ====================================
-- 11. POLITIQUES RLS POUR PROCESSUS_RESERVATIONS
-- ====================================

-- Basé sur les réservations
CREATE POLICY "Users can view own hotel processus" ON public.processus_reservations
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM public.reservations r
            WHERE r.id = reservation_id
            AND can_manage_hotel(r.hotel_id)
        )
    );

-- Admins peuvent tout faire
CREATE POLICY "Admins can manage all processus" ON public.processus_reservations
    FOR ALL
    USING (is_admin());

-- Le personnel peut gérer les processus de leur hôtel
CREATE POLICY "Hotel staff can manage own processus" ON public.processus_reservations
    FOR ALL
    USING (
        get_user_role() IN ('manager', 'receptionniste')
        AND EXISTS (
            SELECT 1 FROM public.reservations r
            WHERE r.id = reservation_id
            AND r.hotel_id = get_user_hotel_id()
        )
    );

-- ====================================
-- 12. POLITIQUES RLS POUR CONVERSATIONS ET MESSAGES
-- ====================================

-- Les utilisateurs peuvent voir leurs conversations
CREATE POLICY "Users can view own conversations" ON public.conversations
    FOR SELECT
    USING (admin_id = auth.uid());

-- Admins peuvent voir toutes les conversations
CREATE POLICY "Admins can view all conversations" ON public.conversations
    FOR ALL
    USING (is_admin());

-- Messages basés sur les conversations
CREATE POLICY "Users can view own messages" ON public.messages
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM public.conversations c
            WHERE c.id = conversation_id
            AND c.admin_id = auth.uid()
        )
    );

CREATE POLICY "Admins can manage all messages" ON public.messages
    FOR ALL
    USING (is_admin());

-- ====================================
-- 13. POLITIQUES RLS POUR DOCUMENTS
-- ====================================

-- Les modèles de documents peuvent être vus par tous les utilisateurs connectés
CREATE POLICY "Authenticated users can view templates" ON public.document_templates
    FOR SELECT
    USING (auth.uid() IS NOT NULL AND statut = 'actif');

-- Admins peuvent gérer les modèles
CREATE POLICY "Admins can manage templates" ON public.document_templates
    FOR ALL
    USING (is_admin());

-- Les documents peuvent être vus selon les réservations
CREATE POLICY "Users can view own hotel documents" ON public.documents
    FOR SELECT
    USING (
        reservation_id IS NULL OR
        EXISTS (
            SELECT 1 FROM public.reservations r
            WHERE r.id = reservation_id
            AND can_manage_hotel(r.hotel_id)
        )
    );

-- Admins peuvent gérer tous les documents
CREATE POLICY "Admins can manage all documents" ON public.documents
    FOR ALL
    USING (is_admin());

-- Le personnel peut créer des documents pour leur hôtel
CREATE POLICY "Hotel staff can create documents" ON public.documents
    FOR INSERT
    WITH CHECK (
        get_user_role() IN ('manager', 'receptionniste', 'comptable')
        AND (
            reservation_id IS NULL OR
            EXISTS (
                SELECT 1 FROM public.reservations r
                WHERE r.id = reservation_id
                AND r.hotel_id = get_user_hotel_id()
            )
        )
    );

-- ====================================
-- 14. POLITIQUES RLS POUR NOTIFICATIONS
-- ====================================

-- Les utilisateurs ne peuvent voir que leurs notifications
CREATE POLICY "Users can view own notifications" ON public.notifications
    FOR SELECT
    USING (user_id = auth.uid());

-- Les utilisateurs peuvent mettre à jour leurs notifications (marquer comme lues)
CREATE POLICY "Users can update own notifications" ON public.notifications
    FOR UPDATE
    USING (user_id = auth.uid());

-- Admins peuvent créer des notifications pour tous
CREATE POLICY "Admins can create notifications" ON public.notifications
    FOR INSERT
    WITH CHECK (is_admin());

-- Le système peut créer des notifications
CREATE POLICY "System can create notifications" ON public.notifications
    FOR INSERT
    WITH CHECK (true);

-- ====================================
-- 15. POLITIQUES BYPASS POUR SERVICE ROLE
-- ====================================

-- Créer une politique qui permet au service role de tout faire
-- (utilisé pour les opérations backend et les migrations)

CREATE POLICY "Service role bypass" ON public.users
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass hotels" ON public.hotels
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass room_categories" ON public.room_categories
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass rooms" ON public.rooms
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass operateurs" ON public.operateurs_sociaux
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass clients" ON public.clients
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass usagers" ON public.usagers
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass conventions" ON public.conventions_prix
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass reservations" ON public.reservations
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass processus" ON public.processus_reservations
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass conversations" ON public.conversations
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass messages" ON public.messages
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass document_templates" ON public.document_templates
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass documents" ON public.documents
    FOR ALL
    USING (current_setting('role') = 'service_role');

CREATE POLICY "Service role bypass notifications" ON public.notifications
    FOR ALL
    USING (current_setting('role') = 'service_role');

-- ====================================
-- 16. GRANTS ET PERMISSIONS
-- ====================================

-- Accorder les permissions nécessaires à l'utilisateur authenticated
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO authenticated;
GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO authenticated;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO authenticated;

-- Accorder toutes les permissions au service_role
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO service_role;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO service_role;
GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO service_role;

-- Accorder les permissions de lecture à anon pour certaines tables (si nécessaire)
GRANT SELECT ON public.hotels TO anon;

-- ====================================
-- SÉCURITÉ RLS APPLIQUÉE AVEC SUCCÈS
-- ====================================

-- Résumé des politiques créées
SELECT 
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;