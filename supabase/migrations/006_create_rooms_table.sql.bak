-- Migration: 006_create_rooms_table.sql
-- Description: Create comprehensive rooms table with constraints, indexes, and RLS policies
-- Date: 2025-08-18

-- Create rooms table
CREATE TABLE IF NOT EXISTS public.rooms (
    id bigserial PRIMARY KEY,
    hotel_id bigint NOT NULL,
    numero varchar(20) NOT NULL,
    type varchar(20) NOT NULL CHECK (type IN ('SIMPLE', 'DOUBLE', 'SUITE', 'FAMILIALE')),
    prix decimal(10,2) NOT NULL CHECK (prix >= 0),
    statut varchar(20) NOT NULL DEFAULT 'DISPONIBLE' CHECK (statut IN ('DISPONIBLE', 'OCCUPEE', 'MAINTENANCE', 'RESERVEE')),
    equipements jsonb DEFAULT '{}',
    capacite integer NOT NULL CHECK (capacite > 0),
    surface decimal(6,2) CHECK (surface > 0),
    description text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add foreign key constraint to hotels table
ALTER TABLE public.rooms
ADD CONSTRAINT fk_rooms_hotel_id
FOREIGN KEY (hotel_id) REFERENCES public.hotels(id)
ON DELETE CASCADE;

-- Add unique constraint for room number within a hotel
ALTER TABLE public.rooms
ADD CONSTRAINT uk_rooms_hotel_numero
UNIQUE (hotel_id, numero);

-- Create indexes for performance optimization
CREATE INDEX IF NOT EXISTS idx_rooms_hotel_id ON public.rooms(hotel_id);
CREATE INDEX IF NOT EXISTS idx_rooms_statut ON public.rooms(statut);
CREATE INDEX IF NOT EXISTS idx_rooms_type ON public.rooms(type);
CREATE INDEX IF NOT EXISTS idx_rooms_prix ON public.rooms(prix);
CREATE INDEX IF NOT EXISTS idx_rooms_capacite ON public.rooms(capacite);
CREATE INDEX IF NOT EXISTS idx_rooms_created_at ON public.rooms(created_at);

-- Create composite index for common queries
CREATE INDEX IF NOT EXISTS idx_rooms_hotel_statut_type ON public.rooms(hotel_id, statut, type);

-- Create trigger function for updated_at timestamp
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for rooms table
DROP TRIGGER IF EXISTS set_updated_at_rooms ON public.rooms;
CREATE TRIGGER set_updated_at_rooms
    BEFORE UPDATE ON public.rooms
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

-- Enable Row Level Security
ALTER TABLE public.rooms ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Allow authenticated users to view rooms" ON public.rooms;
DROP POLICY IF EXISTS "Allow authenticated users to insert rooms" ON public.rooms;
DROP POLICY IF EXISTS "Allow authenticated users to update rooms" ON public.rooms;
DROP POLICY IF EXISTS "Allow authenticated users to delete rooms" ON public.rooms;

-- Create RLS policies for rooms table
-- Policy for SELECT operations
CREATE POLICY "Allow authenticated users to view rooms"
ON public.rooms FOR SELECT
TO authenticated
USING (true);

-- Policy for INSERT operations (admin and manager roles)
CREATE POLICY "Allow authenticated users to insert rooms"
ON public.rooms FOR INSERT
TO authenticated
WITH CHECK (
    EXISTS (
        SELECT 1 FROM public.users 
        WHERE users.id = auth.uid() 
        AND users.role IN ('admin', 'manager')
    )
);

-- Policy for UPDATE operations (admin and manager roles)
CREATE POLICY "Allow authenticated users to update rooms"
ON public.rooms FOR UPDATE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM public.users 
        WHERE users.id = auth.uid() 
        AND users.role IN ('admin', 'manager', 'receptionniste')
    )
)
WITH CHECK (
    EXISTS (
        SELECT 1 FROM public.users 
        WHERE users.id = auth.uid() 
        AND users.role IN ('admin', 'manager', 'receptionniste')
    )
);

-- Policy for DELETE operations (admin only)
CREATE POLICY "Allow authenticated users to delete rooms"
ON public.rooms FOR DELETE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM public.users 
        WHERE users.id = auth.uid() 
        AND users.role = 'admin'
    )
);

-- Grant necessary permissions
GRANT ALL ON public.rooms TO authenticated;
GRANT USAGE, SELECT ON SEQUENCE public.rooms_id_seq TO authenticated;

-- Add helpful comments
COMMENT ON TABLE public.rooms IS 'Table storing room information for hotels';
COMMENT ON COLUMN public.rooms.id IS 'Primary key for rooms';
COMMENT ON COLUMN public.rooms.hotel_id IS 'Foreign key reference to hotels table';
COMMENT ON COLUMN public.rooms.numero IS 'Room number within the hotel';
COMMENT ON COLUMN public.rooms.type IS 'Room type: SIMPLE, DOUBLE, SUITE, or FAMILIALE';
COMMENT ON COLUMN public.rooms.prix IS 'Price per night for the room';
COMMENT ON COLUMN public.rooms.statut IS 'Current room status: DISPONIBLE, OCCUPEE, MAINTENANCE, or RESERVEE';
COMMENT ON COLUMN public.rooms.equipements IS 'JSON object containing room equipment and amenities';
COMMENT ON COLUMN public.rooms.capacite IS 'Maximum number of people the room can accommodate';
COMMENT ON COLUMN public.rooms.surface IS 'Room surface area in square meters';
COMMENT ON COLUMN public.rooms.description IS 'Additional room description or notes';
COMMENT ON COLUMN public.rooms.created_at IS 'Timestamp when room was created';
COMMENT ON COLUMN public.rooms.updated_at IS 'Timestamp when room was last updated';

-- Insert some sample data for testing (optional)
-- This can be uncommented for development environments
/*
INSERT INTO public.rooms (hotel_id, numero, type, prix, statut, equipements, capacite, surface, description) VALUES
(1, '101', 'SIMPLE', 45.00, 'DISPONIBLE', '{"wifi": true, "tv": true, "climatisation": false}', 1, 15.5, 'Chambre simple avec vue sur jardin'),
(1, '102', 'DOUBLE', 65.00, 'DISPONIBLE', '{"wifi": true, "tv": true, "climatisation": true}', 2, 20.0, 'Chambre double avec climatisation'),
(1, '201', 'SUITE', 120.00, 'MAINTENANCE', '{"wifi": true, "tv": true, "climatisation": true, "minibar": true}', 4, 35.0, 'Suite familiale avec salon'),
(2, '01', 'FAMILIALE', 85.00, 'DISPONIBLE', '{"wifi": true, "tv": true, "climatisation": true}', 5, 28.0, 'Chambre familiale spacieuse');
*/