#!/usr/bin/env node

/**
 * DIAGNOSTIC SCHEMA EQUIPEMENTS
 * V√©rification de la structure r√©elle de la table equipments
 */

const fetch = require('node-fetch');
const fs = require('fs');

console.log('üîç DIAGNOSTIC SCHEMA EQUIPEMENTS');
console.log('=================================\n');

// Charger la configuration
let config;
try {
  config = JSON.parse(fs.readFileSync('mcp-supabase-config.json', 'utf8'));
  console.log('‚úÖ Configuration charg√©e');
} catch (error) {
  console.log('‚ùå Erreur de configuration:', error.message);
  process.exit(1);
}

async function checkTableStructure() {
  try {
    console.log('üìã V√âRIFICATION DE LA STRUCTURE DES TABLES');
    console.log('------------------------------------------');

    // V√©rifier toutes les tables disponibles
    const tablesResponse = await fetch(`${config.supabase.url}/rest/v1/information_schema.tables?table_schema=eq.public&select=table_name`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${config.supabase.service_role_key}`,
        'Content-Type': 'application/json',
        'apikey': config.supabase.service_role_key
      }
    });

    if (tablesResponse.ok) {
      const tables = await tablesResponse.json();
      console.log('‚úÖ Tables disponibles dans le sch√©ma public:');
      tables.forEach(table => {
        console.log(`  ‚Ä¢ ${table.table_name}`);
      });
      
      const equipmentTables = tables.filter(t => 
        t.table_name.includes('equipment') || 
        t.table_name.includes('equipement')
      );
      
      if (equipmentTables.length > 0) {
        console.log('\nüéØ Tables li√©es aux √©quipements trouv√©es:');
        equipmentTables.forEach(table => {
          console.log(`  ‚Ä¢ ${table.table_name}`);
        });
      } else {
        console.log('\n‚ùå Aucune table d\'√©quipements trouv√©e !');
      }
    } else {
      console.log('‚ùå Erreur r√©cup√©ration tables:', await tablesResponse.text());
    }

    // V√©rifier les colonnes de la table equipments si elle existe
    console.log('\nüìä STRUCTURE DE LA TABLE equipments');
    console.log('-----------------------------------');
    
    const columnsResponse = await fetch(`${config.supabase.url}/rest/v1/information_schema.columns?table_name=eq.equipments&table_schema=eq.public&select=column_name,data_type,is_nullable`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${config.supabase.service_role_key}`,
        'Content-Type': 'application/json',
        'apikey': config.supabase.service_role_key
      }
    });

    if (columnsResponse.ok) {
      const columns = await columnsResponse.json();
      if (columns.length > 0) {
        console.log('‚úÖ Colonnes de la table equipments:');
        columns.forEach(col => {
          console.log(`  ‚Ä¢ ${col.column_name} (${col.data_type}) ${col.is_nullable === 'YES' ? '(nullable)' : '(not null)'}`);
        });
      } else {
        console.log('‚ùå Table equipments introuvable ou sans colonnes');
      }
    } else {
      console.log('‚ùå Erreur r√©cup√©ration colonnes:', await columnsResponse.text());
    }

    // Essayer d'acc√©der directement √† la table equipments
    console.log('\nüß™ TEST D\'ACC√àS DIRECT');
    console.log('----------------------');
    
    const directResponse = await fetch(`${config.supabase.url}/rest/v1/equipments?select=*&limit=1`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${config.supabase.service_role_key}`,
        'Content-Type': 'application/json',
        'apikey': config.supabase.service_role_key
      }
    });

    console.log(`Status: ${directResponse.status}`);
    const directText = await directResponse.text();
    console.log(`Response: ${directText}`);

    if (directResponse.status === 200) {
      try {
        const data = JSON.parse(directText);
        if (data.length > 0) {
          console.log('‚úÖ Exemple d\'enregistrement:');
          console.log(JSON.stringify(data[0], null, 2));
        } else {
          console.log('‚úÖ Table accessible mais vide');
        }
      } catch (e) {
        console.log('‚ö†Ô∏è  R√©ponse non-JSON:', directText);
      }
    }

  } catch (error) {
    console.log('‚ùå Erreur diagnostic:', error.message);
  }
}

// Cr√©er des instructions pour cr√©er la table si elle n'existe pas
function generateCreateTableSQL() {
  console.log('\nüìù SQL POUR CR√âER LA TABLE EQUIPMENTS');
  console.log('=====================================');
  
  const createSQL = `-- Cr√©ation de la table equipments
CREATE TABLE IF NOT EXISTS public.equipments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  nom VARCHAR(255) NOT NULL,
  description TEXT,
  type VARCHAR(100),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Cr√©ation de la table de liaison hotel_equipments
CREATE TABLE IF NOT EXISTS public.hotel_equipments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  hotel_id UUID REFERENCES public.hotels(id) ON DELETE CASCADE,
  equipment_id UUID REFERENCES public.equipments(id) ON DELETE CASCADE,
  quantite INTEGER DEFAULT 1,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(hotel_id, equipment_id)
);

-- Politiques RLS ultra-permissives
ALTER TABLE public.equipments ENABLE ROW LEVEL SECURITY;
CREATE POLICY "ultra_permissive_policy" ON public.equipments FOR ALL USING (true) WITH CHECK (true);

ALTER TABLE public.hotel_equipments ENABLE ROW LEVEL SECURITY;
CREATE POLICY "ultra_permissive_policy" ON public.hotel_equipments FOR ALL USING (true) WITH CHECK (true);

-- Donn√©es de test
INSERT INTO public.equipments (nom, description, type) VALUES 
('Wi-Fi', 'Acc√®s Internet sans fil', 'CONNECTIVITE'),
('Parking', 'Place de parking', 'TRANSPORT'),
('Climatisation', 'Climatisation dans les chambres', 'CONFORT'),
('T√©l√©vision', 'T√©l√©vision dans les chambres', 'DIVERTISSEMENT'),
('Ascenseur', 'Acc√®s facilit√© aux √©tages', 'ACCESSIBILITE')
ON CONFLICT DO NOTHING;`;

  console.log(createSQL);
  return createSQL;
}

async function main() {
  await checkTableStructure();
  const createSQL = generateCreateTableSQL();
  
  console.log('\nüéØ R√âSUM√â ET ACTIONS');
  console.log('===================');
  console.log('1. V√©rifiez si la table equipments existe dans le diagnostic ci-dessus');
  console.log('2. Si elle n\'existe pas, utilisez le SQL fourni pour la cr√©er');
  console.log('3. Si elle existe mais avec d\'autres colonnes, adaptez votre code');
  console.log('4. Les politiques RLS ultra-permissives sont incluses dans le SQL');
}

main().catch(console.error);