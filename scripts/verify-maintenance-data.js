/**
 * Script de v√©rification des donn√©es dans maintenance_tasks
 * Affiche toutes les t√¢ches actuellement en base de donn√©es
 */

require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'http://127.0.0.1:15421';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Fonction pour formater la date
function formatDate(dateString) {
  if (!dateString) return 'N/A';
  return new Date(dateString).toLocaleDateString('fr-FR');
}

// Fonction pour obtenir l'emoji de priorit√©
function getPriorityEmoji(priority) {
  switch(priority) {
    case 'urgente': return 'üî¥';
    case 'haute': return 'üü†';
    case 'moyenne': return 'üü°';
    case 'faible': return 'üü¢';
    default: return '‚ö™';
  }
}

// Fonction pour obtenir l'emoji de statut
function getStatusEmoji(status) {
  switch(status) {
    case 'terminee': return '‚úÖ';
    case 'en_cours': return 'üîÑ';
    case 'annulee': return '‚ùå';
    case 'en_attente': return '‚è≥';
    default: return '‚ùì';
  }
}

async function verifyData() {
  console.log('\nüìä V√âRIFICATION DES DONN√âES MAINTENANCE_TASKS');
  console.log('=' .repeat(70));

  try {
    // 1. R√©cup√©rer toutes les t√¢ches avec leurs relations
    const { data: tasks, error, count } = await supabase
      .from('maintenance_tasks')
      .select(`
        *,
        rooms (
          id,
          numero,
          statut
        ),
        hotels (
          id,
          nom
        )
      `, { count: 'exact' })
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es:', error);
      return;
    }

    console.log(`\n‚úÖ TOTAL DE T√ÇCHES EN BASE: ${count || 0}\n`);

    if (!tasks || tasks.length === 0) {
      console.log('‚ÑπÔ∏è  Aucune t√¢che de maintenance trouv√©e dans la base de donn√©es.');
      return;
    }

    // 2. Afficher les 10 derni√®res t√¢ches cr√©√©es
    console.log('üìã DERNI√àRES T√ÇCHES CR√â√âES (max 10):');
    console.log('-' .repeat(70));

    const recentTasks = tasks.slice(0, 10);
    
    recentTasks.forEach((task, index) => {
      console.log(`\n${index + 1}. [ID: ${task.id}] ${task.titre}`);
      console.log(`   ${getPriorityEmoji(task.priorite)} Priorit√©: ${task.priorite} | ${getStatusEmoji(task.statut)} Statut: ${task.statut}`);
      console.log(`   üìç Chambre: ${task.rooms?.numero || 'N/A'} | üè® H√¥tel: ${task.hotels?.nom || 'N/A'}`);
      console.log(`   üë§ Responsable: ${task.responsable || 'Non assign√©'}`);
      console.log(`   üìÖ √âch√©ance: ${formatDate(task.date_echeance)}`);
      if (task.description) {
        console.log(`   üìù Description: ${task.description.substring(0, 50)}${task.description.length > 50 ? '...' : ''}`);
      }
      if (task.notes) {
        console.log(`   üí≠ Notes: ${task.notes.substring(0, 50)}${task.notes.length > 50 ? '...' : ''}`);
      }
      console.log(`   üïê Cr√©√©e le: ${formatDate(task.created_at)}`);
    });

    // 3. Statistiques par priorit√©
    console.log('\n' + '=' .repeat(70));
    console.log('\nüìä STATISTIQUES PAR PRIORIT√â:');
    console.log('-' .repeat(30));
    
    const priorityStats = {};
    tasks.forEach(task => {
      priorityStats[task.priorite] = (priorityStats[task.priorite] || 0) + 1;
    });

    Object.entries(priorityStats)
      .sort((a, b) => {
        const order = ['urgente', 'haute', 'moyenne', 'faible'];
        return order.indexOf(a[0]) - order.indexOf(b[0]);
      })
      .forEach(([priority, count]) => {
        const percentage = ((count / tasks.length) * 100).toFixed(1);
        const bar = '‚ñà'.repeat(Math.floor(percentage / 2));
        console.log(`${getPriorityEmoji(priority)} ${priority.padEnd(10)} : ${count.toString().padStart(3)} (${percentage}%) ${bar}`);
      });

    // 4. Statistiques par statut
    console.log('\nüìä STATISTIQUES PAR STATUT:');
    console.log('-' .repeat(30));
    
    const statusStats = {};
    tasks.forEach(task => {
      statusStats[task.statut] = (statusStats[task.statut] || 0) + 1;
    });

    Object.entries(statusStats).forEach(([status, count]) => {
      const percentage = ((count / tasks.length) * 100).toFixed(1);
      const bar = '‚ñà'.repeat(Math.floor(percentage / 2));
      console.log(`${getStatusEmoji(status)} ${status.padEnd(10)} : ${count.toString().padStart(3)} (${percentage}%) ${bar}`);
    });

    // 5. T√¢ches en retard
    console.log('\n‚ö†Ô∏è  T√ÇCHES EN RETARD:');
    console.log('-' .repeat(30));
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const overdueTasks = tasks.filter(task => {
      if (!task.date_echeance || task.statut === 'terminee' || task.statut === 'annulee') {
        return false;
      }
      const dueDate = new Date(task.date_echeance);
      return dueDate < today;
    });

    if (overdueTasks.length > 0) {
      overdueTasks.forEach(task => {
        const daysOverdue = Math.floor((today - new Date(task.date_echeance)) / (1000 * 60 * 60 * 24));
        console.log(`üö® "${task.titre}" - Retard de ${daysOverdue} jour(s)`);
        console.log(`   Chambre ${task.rooms?.numero} | Responsable: ${task.responsable || 'Non assign√©'}`);
      });
    } else {
      console.log('‚úÖ Aucune t√¢che en retard');
    }

    // 6. T√¢ches √† venir (7 prochains jours)
    console.log('\nüìÖ T√ÇCHES √Ä VENIR (7 prochains jours):');
    console.log('-' .repeat(30));
    
    const sevenDaysFromNow = new Date();
    sevenDaysFromNow.setDate(sevenDaysFromNow.getDate() + 7);
    
    const upcomingTasks = tasks.filter(task => {
      if (!task.date_echeance || task.statut === 'terminee' || task.statut === 'annulee') {
        return false;
      }
      const dueDate = new Date(task.date_echeance);
      return dueDate >= today && dueDate <= sevenDaysFromNow;
    }).sort((a, b) => new Date(a.date_echeance) - new Date(b.date_echeance));

    if (upcomingTasks.length > 0) {
      upcomingTasks.forEach(task => {
        console.log(`üìå ${formatDate(task.date_echeance)} - "${task.titre}"`);
        console.log(`   ${getPriorityEmoji(task.priorite)} Priorit√©: ${task.priorite} | Chambre: ${task.rooms?.numero}`);
      });
    } else {
      console.log('‚ÑπÔ∏è  Aucune t√¢che pr√©vue dans les 7 prochains jours');
    }

    // 7. R√©sum√© final
    console.log('\n' + '=' .repeat(70));
    console.log('\n‚úÖ V√âRIFICATION TERMIN√âE');
    console.log('\nüìä R√âSUM√â:');
    console.log(`   ‚Ä¢ Total de t√¢ches: ${tasks.length}`);
    console.log(`   ‚Ä¢ T√¢ches en attente: ${statusStats['en_attente'] || 0}`);
    console.log(`   ‚Ä¢ T√¢ches en cours: ${statusStats['en_cours'] || 0}`);
    console.log(`   ‚Ä¢ T√¢ches termin√©es: ${statusStats['terminee'] || 0}`);
    console.log(`   ‚Ä¢ T√¢ches en retard: ${overdueTasks.length}`);
    console.log(`   ‚Ä¢ T√¢ches urgentes: ${priorityStats['urgente'] || 0}`);
    
    console.log('\nüí° Les donn√©es sont correctement stock√©es dans maintenance_tasks');
    console.log('   et accessibles via l\'application sur http://localhost:3011/maintenance');

  } catch (error) {
    console.error('\n‚ùå Erreur lors de la v√©rification:', error);
  }
}

// Lancer la v√©rification
verifyData();