/**
 * Script automatique pour d√©sactiver RLS sur maintenance_tasks en d√©veloppement
 * Version sans confirmation pour utilisation automatis√©e
 */

require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'http://127.0.0.1:15421';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function disableRLS() {
  console.log('üîß D√©sactivation du RLS sur maintenance_tasks...\n');

  try {
    // 1. Supprimer toutes les politiques existantes
    const dropPoliciesSQL = `
      DROP POLICY IF EXISTS "maintenance_tasks_tenant_isolation" ON maintenance_tasks;
      DROP POLICY IF EXISTS "Users can view maintenance tasks" ON maintenance_tasks;
      DROP POLICY IF EXISTS "Users can create maintenance tasks" ON maintenance_tasks;
      DROP POLICY IF EXISTS "Users can update their maintenance tasks" ON maintenance_tasks;
      DROP POLICY IF EXISTS "Users can delete their maintenance tasks" ON maintenance_tasks;
      DROP POLICY IF EXISTS "Development mode - allow all for authenticated users" ON maintenance_tasks;
      DROP POLICY IF EXISTS "Allow all operations for authenticated users" ON maintenance_tasks;
    `;

    console.log('üìã Suppression des politiques existantes...');
    for (const sql of dropPoliciesSQL.split(';').filter(s => s.trim())) {
      const { error } = await supabase.rpc('exec_sql', { sql: sql.trim() });
      if (error && !error.message.includes('does not exist')) {
        console.log(`   ‚ö†Ô∏è  ${error.message}`);
      }
    }

    // 2. D√©sactiver RLS sur la table
    console.log('üîì D√©sactivation de RLS...');
    const { error: disableError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE maintenance_tasks DISABLE ROW LEVEL SECURITY;'
    });

    if (disableError) {
      // Si exec_sql n'existe pas, cr√©er une politique tr√®s permissive
      console.log('   ‚ÑπÔ∏è  M√©thode alternative : cr√©ation d\'une politique permissive...');
      
      const { error: policyError } = await supabase.rpc('exec_sql', {
        sql: `
          CREATE POLICY "Allow all operations for authenticated users"
          ON maintenance_tasks
          FOR ALL
          TO authenticated
          USING (true)
          WITH CHECK (true);
        `
      });

      if (!policyError) {
        console.log('   ‚úÖ Politique permissive cr√©√©e');
      }
    } else {
      console.log('   ‚úÖ RLS d√©sactiv√© avec succ√®s');
    }

    // 3. Test de v√©rification
    console.log('\nüß™ Test de v√©rification...');
    
    // Test d'insertion
    const testData = {
      titre: 'Test RLS d√©sactiv√©',
      description: 'Test automatique apr√®s d√©sactivation RLS',
      priorite: 'faible',
      statut: 'en_attente',
      room_id: 1,
      hotel_id: 1,
      user_owner_id: '46e58630-4ae0-4682-aa24-a4be2fb6e866',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    const { data: insertResult, error: insertError } = await supabase
      .from('maintenance_tasks')
      .insert(testData)
      .select()
      .single();

    if (!insertError) {
      console.log('   ‚úÖ Insertion test r√©ussie (ID: ' + insertResult.id + ')');
      
      // Nettoyage
      await supabase
        .from('maintenance_tasks')
        .delete()
        .eq('id', insertResult.id);
      
      console.log('   ‚úÖ Nettoyage effectu√©');
    } else {
      console.log('   ‚ùå Erreur lors du test :', insertError.message);
    }

    // 4. R√©sum√©
    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ RLS D√âSACTIV√â AVEC SUCC√àS');
    console.log('='.repeat(50));
    console.log('\n‚ö†Ô∏è  RAPPEL IMPORTANT:');
    console.log('   ‚Ä¢ RLS est maintenant d√©sactiv√© sur maintenance_tasks');
    console.log('   ‚Ä¢ Toutes les donn√©es sont accessibles sans restriction');
    console.log('   ‚Ä¢ NE PAS utiliser cette configuration en production');
    console.log('   ‚Ä¢ Pour r√©activer RLS : node scripts/apply-rls-fix.js');
    
    console.log('\nüí° L\'application devrait maintenant fonctionner correctement.');
    console.log('   Testez l\'ajout de t√¢ches de maintenance sur http://localhost:3012/maintenance');

  } catch (error) {
    console.error('\n‚ùå Erreur lors de la d√©sactivation du RLS:', error);
    process.exit(1);
  }
}

// Ex√©cuter imm√©diatement
disableRLS();