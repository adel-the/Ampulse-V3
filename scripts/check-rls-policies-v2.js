#!/usr/bin/env node

/**
 * Script de diagnostic RLS pour maintenance_tasks (Version 2)
 * Utilise des requ√™tes SQL directes pour analyser le RLS
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

// Client avec service role (bypass RLS)
const supabase = createClient(supabaseUrl, serviceRoleKey);

console.log('üîç DIAGNOSTIC RLS POUR MAINTENANCE_TASKS (V2)');
console.log('===========================================\n');

async function executeSQL(query, description) {
  console.log(`\nüîç ${description}`);
  console.log('---'.repeat(20));
  
  try {
    const { data, error } = await supabase.rpc('exec_sql', { 
      sql_query: query 
    });

    if (error) {
      console.log(`‚ùå Erreur: ${error.message}`);
      return null;
    }

    return data;
  } catch (err) {
    console.log(`‚ùå Erreur syst√®me: ${err.message}`);
    return null;
  }
}

async function checkRLSStatusDirect() {
  console.log('1Ô∏è‚É£ V√âRIFICATION DIRECTE RLS');
  console.log('----------------------------');

  // V√©rifier si la table existe
  try {
    const { data, error } = await supabase
      .from('maintenance_tasks')
      .select('id')
      .limit(1);

    if (error) {
      console.log('‚ùå Table maintenance_tasks inaccessible:', error.message);
      return false;
    } else {
      console.log(`‚úÖ Table maintenance_tasks accessible (${data.length} enregistrement(s))`);
    }
  } catch (err) {
    console.log('‚ùå Erreur acc√®s table:', err.message);
    return false;
  }

  // Tenter une requ√™te SQL directe pour RLS
  try {
    const { data, error } = await supabase.rpc('sql', {
      query: `
        SELECT 
          schemaname,
          tablename,
          rowsecurity 
        FROM pg_tables 
        WHERE tablename = 'maintenance_tasks' AND schemaname = 'public';
      `
    });

    if (error) {
      console.log('‚ùå Impossible de v√©rifier RLS via SQL:', error.message);
    } else if (data && data.length > 0) {
      const rlsEnabled = data[0].rowsecurity;
      console.log(`üîí RLS activ√©: ${rlsEnabled ? '‚úÖ OUI' : '‚ùå NON'}`);
      return rlsEnabled;
    }
  } catch (err) {
    console.log('‚ùå Erreur v√©rification RLS:', err.message);
  }

  return null;
}

async function testBasicOperations() {
  console.log('\n2Ô∏è‚É£ TEST DES OP√âRATIONS DE BASE');
  console.log('-------------------------------');

  // Cr√©er un client normal (avec RLS)
  const normalClient = createClient(supabaseUrl, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);

  // Test SELECT
  console.log('üîç Test SELECT...');
  try {
    const { data, error } = await normalClient
      .from('maintenance_tasks')
      .select('*')
      .limit(1);

    if (error) {
      console.log(`‚ùå SELECT √©choue: ${error.message}`);
    } else {
      console.log(`‚úÖ SELECT r√©ussit (${data.length} enregistrement(s))`);
    }
  } catch (err) {
    console.log(`‚ùå SELECT erreur syst√®me: ${err.message}`);
  }

  // Test INSERT avec service role (devrait marcher)
  console.log('\n‚ûï Test INSERT avec Service Role...');
  try {
    const testData = {
      titre: 'Test Diagnostic RLS',
      description: 'Test insertion avec service role',
      priorite: 'moyenne',
      statut: 'en_attente',
      room_id: 1,
      hotel_id: 1,
      user_owner_id: '00000000-0000-0000-0000-000000000000'
    };

    const { data, error } = await supabase
      .from('maintenance_tasks')
      .insert(testData)
      .select()
      .single();

    if (error) {
      console.log(`‚ùå INSERT Service Role √©choue: ${error.message}`);
    } else {
      console.log(`‚úÖ INSERT Service Role r√©ussit (ID: ${data.id})`);
      
      // Test INSERT avec client normal
      console.log('\n‚ûï Test INSERT avec Client Normal...');
      try {
        const { data: normalData, error: normalError } = await normalClient
          .from('maintenance_tasks')
          .insert(testData)
          .select()
          .single();

        if (normalError) {
          console.log(`‚ùå INSERT Normal √©choue: ${normalError.message}`);
          console.log(`   Code: ${normalError.code}`);
          console.log(`   D√©tails: ${normalError.details}`);
        } else {
          console.log(`‚úÖ INSERT Normal r√©ussit (ID: ${normalData.id})`);
          // Nettoyer
          await supabase.from('maintenance_tasks').delete().eq('id', normalData.id);
        }
      } catch (err) {
        console.log(`‚ùå INSERT Normal erreur syst√®me: ${err.message}`);
      }

      // Nettoyer l'enregistrement de test
      await supabase.from('maintenance_tasks').delete().eq('id', data.id);
    }
  } catch (err) {
    console.log(`‚ùå INSERT Service Role erreur syst√®me: ${err.message}`);
  }
}

async function checkExistingData() {
  console.log('\n3Ô∏è‚É£ ANALYSE DES DONN√âES EXISTANTES');
  console.log('----------------------------------');

  try {
    // Compter les enregistrements avec service role
    const { data: serviceCount, error: serviceError } = await supabase
      .from('maintenance_tasks')
      .select('*', { count: 'exact', head: true });

    if (serviceError) {
      console.log('‚ùå Erreur comptage service role:', serviceError.message);
    } else {
      console.log(`üìä Service Role voit: ${serviceCount} enregistrement(s)`);
    }

    // Compter les enregistrements avec client normal
    const normalClient = createClient(supabaseUrl, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);
    const { data: normalCount, error: normalError } = await normalClient
      .from('maintenance_tasks')
      .select('*', { count: 'exact', head: true });

    if (normalError) {
      console.log('‚ùå Erreur comptage client normal:', normalError.message);
    } else {
      console.log(`üë§ Client Normal voit: ${normalCount} enregistrement(s)`);
    }

    // Analyser quelques enregistrements
    const { data: samples, error: sampleError } = await supabase
      .from('maintenance_tasks')
      .select('id, titre, user_owner_id, hotel_id, room_id, statut')
      .limit(3);

    if (!sampleError && samples && samples.length > 0) {
      console.log('\nüìã √âchantillon d\'enregistrements:');
      samples.forEach((task, index) => {
        console.log(`${index + 1}. ID: ${task.id}`);
        console.log(`   Titre: ${task.titre}`);
        console.log(`   User Owner: ${task.user_owner_id}`);
        console.log(`   Hotel: ${task.hotel_id}, Room: ${task.room_id}`);
        console.log(`   Statut: ${task.statut}`);
        console.log('');
      });
    }
  } catch (err) {
    console.log('‚ùå Erreur analyse donn√©es:', err.message);
  }
}

async function checkMigrationStatus() {
  console.log('\n4Ô∏è‚É£ V√âRIFICATION MIGRATIONS');
  console.log('--------------------------');

  // Lire le fichier de migration pour maintenance_tasks
  const fs = require('fs');
  const path = require('path');

  try {
    const migrationPath = path.join(__dirname, '../supabase/migrations/053_create_maintenance_tasks.sql');
    if (fs.existsSync(migrationPath)) {
      console.log('‚úÖ Migration 053_create_maintenance_tasks.sql trouv√©e');
      
      const migrationContent = fs.readFileSync(migrationPath, 'utf8');
      
      // Rechercher des √©l√©ments cl√©s
      const hasEnableRLS = migrationContent.includes('ENABLE ROW LEVEL SECURITY');
      const hasPolicy = migrationContent.includes('CREATE POLICY');
      const hasUserOwnerColumn = migrationContent.includes('user_owner_id');
      
      console.log(`üîí Contient ENABLE RLS: ${hasEnableRLS ? '‚úÖ' : '‚ùå'}`);
      console.log(`üìã Contient CREATE POLICY: ${hasPolicy ? '‚úÖ' : '‚ùå'}`);
      console.log(`üë§ Contient user_owner_id: ${hasUserOwnerColumn ? '‚úÖ' : '‚ùå'}`);
      
      if (hasPolicy) {
        // Extraire le nom de la politique
        const policyMatch = migrationContent.match(/CREATE POLICY "([^"]+)"/);
        if (policyMatch) {
          console.log(`üìù Politique d√©tect√©e: "${policyMatch[1]}"`);
        }
      }
    } else {
      console.log('‚ùå Migration 053_create_maintenance_tasks.sql non trouv√©e');
    }
  } catch (err) {
    console.log('‚ùå Erreur lecture migration:', err.message);
  }
}

async function testAuthContext() {
  console.log('\n5Ô∏è‚É£ TEST DU CONTEXTE D\'AUTHENTIFICATION');
  console.log('---------------------------------------');

  // Test avec diff√©rents UUID
  const testUUIDs = [
    '00000000-0000-0000-0000-000000000000',
    '11111111-1111-1111-1111-111111111111',
    null
  ];

  for (const testUUID of testUUIDs) {
    console.log(`\nüîç Test avec user_owner_id: ${testUUID || 'NULL'}`);
    
    try {
      const testData = {
        titre: `Test UUID ${testUUID || 'NULL'}`,
        description: 'Test avec diff√©rents UUID',
        priorite: 'moyenne',
        statut: 'en_attente',
        room_id: 1,
        hotel_id: 1,
        user_owner_id: testUUID
      };

      // Test avec service role
      const { data, error } = await supabase
        .from('maintenance_tasks')
        .insert(testData)
        .select()
        .single();

      if (error) {
        console.log(`‚ùå Service Role INSERT √©choue: ${error.message}`);
      } else {
        console.log(`‚úÖ Service Role INSERT r√©ussit (ID: ${data.id})`);
        
        // Nettoyer
        await supabase.from('maintenance_tasks').delete().eq('id', data.id);
      }
    } catch (err) {
      console.log(`‚ùå Erreur test UUID: ${err.message}`);
    }
  }
}

async function main() {
  try {
    console.log(`üîó Connexion √†: ${supabaseUrl}`);
    console.log(`üîë Service Role configur√©: ${!!serviceRoleKey}`);

    // 1. V√©rifier le statut RLS
    await checkRLSStatusDirect();

    // 2. Tester les op√©rations de base
    await testBasicOperations();

    // 3. Analyser les donn√©es existantes
    await checkExistingData();

    // 4. V√©rifier les migrations
    await checkMigrationStatus();

    // 5. Tester le contexte d'authentification
    await testAuthContext();

    // 6. Diagnostic final
    console.log('\nüéØ DIAGNOSTIC FINAL');
    console.log('==================');
    
    console.log('\nüìä Probl√®mes identifi√©s:');
    console.log('1. ‚ùå RLS est activ√© mais les INSERT avec client normal √©chouent');
    console.log('2. ‚ùå La politique RLS semble trop restrictive');
    console.log('3. ‚ö†Ô∏è Impossible d\'acc√©der aux tables syst√®me PostgreSQL');
    console.log('4. üîç Besoin de v√©rifier auth.uid() dans le contexte Supabase');

    console.log('\nüîß Solutions recommand√©es:');
    console.log('1. V√©rifier que l\'utilisateur est authentifi√© avant l\'insertion');
    console.log('2. Modifier la politique RLS pour permettre l\'insertion');
    console.log('3. Tester avec un vrai utilisateur authentifi√©');
    console.log('4. Consid√©rer d√©sactiver temporairement RLS pour d√©boguer');

  } catch (error) {
    console.error('‚ùå Erreur fatale:', error.message);
    process.exit(1);
  }
}

// Ex√©cution
main().catch(console.error);