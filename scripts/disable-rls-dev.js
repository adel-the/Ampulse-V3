#!/usr/bin/env node

/**
 * Script pour d√©sactiver compl√®tement RLS en environnement de d√©veloppement
 * ‚ö†Ô∏è  ATTENTION: √Ä utiliser UNIQUEMENT en environnement local !
 * 
 * Ce script supprime toutes les politiques RLS et d√©sactive la s√©curit√© 
 * au niveau des lignes pour faciliter le d√©veloppement et les tests.
 * 
 * Usage:
 *   node scripts/disable-rls-dev.js
 *   node scripts/disable-rls-dev.js --confirm  # Confirmation automatique
 */

const { createClient } = require('@supabase/supabase-js');
const readline = require('readline');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes:');
  console.error('   - NEXT_PUBLIC_SUPABASE_URL');
  console.error('   - SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

const autoConfirm = process.argv.includes('--confirm');

function askConfirmation(question) {
  return new Promise((resolve) => {
    if (autoConfirm) {
      console.log(question + ' (auto-confirm√©: oui)');
      resolve(true);
      return;
    }
    
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    rl.question(question + ' (oui/non): ', (answer) => {
      rl.close();
      resolve(answer.toLowerCase() === 'oui' || answer.toLowerCase() === 'o' || answer.toLowerCase() === 'yes' || answer.toLowerCase() === 'y');
    });
  });
}

async function disableRLSForDevelopment() {
  console.log('üö® D√âSACTIVATION RLS POUR D√âVELOPPEMENT');
  console.log('=====================================\n');
  
  console.log('‚ö†Ô∏è  ATTENTION: Cette op√©ration va:');
  console.log('   - Supprimer TOUTES les politiques RLS de maintenance_tasks');
  console.log('   - D√©sactiver compl√®tement la s√©curit√© au niveau des lignes');
  console.log('   - Permettre l\'acc√®s √† toutes les donn√©es pour tous les utilisateurs authentifi√©s');
  console.log('   - NE DOIT JAMAIS √™tre utilis√© en production !\n');
  
  // V√©rifier l'environnement
  if (supabaseUrl && supabaseUrl.includes('supabase.co') && !supabaseUrl.includes('localhost')) {
    console.error('‚ùå ERREUR: URL Supabase d√©tect√©e comme production !');
    console.error('   Cette op√©ration est interdite sur un environnement de production.');
    console.error('   URL d√©tect√©e:', supabaseUrl);
    process.exit(1);
  }
  
  const confirmed = await askConfirmation('√ätes-vous s√ªr de vouloir continuer ?');
  if (!confirmed) {
    console.log('‚ùå Op√©ration annul√©e par l\'utilisateur');
    process.exit(0);
  }

  try {
    // 1. Lister les politiques existantes
    console.log('\n1Ô∏è‚É£ V√©rification des politiques existantes...');
    const { data: existingPolicies, error: listError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT policyname, cmd
        FROM pg_policies 
        WHERE tablename = 'maintenance_tasks'
        ORDER BY policyname;`
    });
    
    if (listError) {
      console.warn('‚ö†Ô∏è  Impossible de lister les politiques:', listError.message);
    } else if (existingPolicies && existingPolicies.length > 0) {
      console.log('üìã Politiques trouv√©es:');
      existingPolicies.forEach(policy => {
        console.log(`   - ${policy.policyname} (${policy.cmd})`);
      });
    } else {
      console.log('   Aucune politique existante trouv√©e');
    }

    // 2. Supprimer toutes les politiques
    console.log('\n2Ô∏è‚É£ Suppression de toutes les politiques...');
    const dropPoliciesSQL = `
      DO $$ 
      DECLARE 
        r RECORD;
      BEGIN
        FOR r IN 
          SELECT policyname 
          FROM pg_policies 
          WHERE tablename = 'maintenance_tasks' 
        LOOP
          EXECUTE 'DROP POLICY IF EXISTS "' || r.policyname || '" ON maintenance_tasks';
          RAISE NOTICE 'Politique supprim√©e: %', r.policyname;
        END LOOP;
      END $$;`;
    
    const { error: dropError } = await supabase.rpc('exec_sql', { sql: dropPoliciesSQL });
    if (dropError) throw new Error(`Erreur suppression politiques: ${dropError.message}`);
    console.log('‚úÖ Toutes les politiques supprim√©es');

    // 3. D√©sactiver RLS
    console.log('\n3Ô∏è‚É£ D√©sactivation de RLS...');
    const { error: disableError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE maintenance_tasks DISABLE ROW LEVEL SECURITY;'
    });
    
    if (disableError) throw new Error(`Erreur d√©sactivation RLS: ${disableError.message}`);
    console.log('‚úÖ RLS d√©sactiv√© pour maintenance_tasks');

    // 4. V√©rification finale
    console.log('\n4Ô∏è‚É£ V√©rification finale...');
    const { data: verification, error: verifyError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT 
          schemaname,
          tablename,
          relrowsecurity as rls_enabled,
          (SELECT count(*) FROM pg_policies WHERE tablename = 'maintenance_tasks') as policy_count
        FROM pg_class c
        JOIN pg_namespace n ON n.oid = c.relnamespace
        WHERE n.nspname = 'public' 
        AND c.relname = 'maintenance_tasks';`
    });
    
    if (verifyError) {
      console.warn('‚ö†Ô∏è  Impossible de v√©rifier le statut:', verifyError.message);
    } else if (verification && verification.length > 0) {
      const status = verification[0];
      console.log('üìä Statut final:');
      console.log(`   - RLS activ√©: ${status.rls_enabled ? 'OUI' : 'NON'}`);
      console.log(`   - Nombre de politiques: ${status.policy_count}`);
      
      if (!status.rls_enabled && status.policy_count === '0') {
        console.log('‚úÖ RLS compl√®tement d√©sactiv√© avec succ√®s');
      } else {
        console.warn('‚ö†Ô∏è  D√©sactivation incompl√®te d√©tect√©e');
      }
    }

    // 5. Avertissements finaux
    console.log('\nüéâ D√âSACTIVATION RLS TERMIN√âE');
    console.log('=============================');
    console.log('‚úÖ Toutes les politiques RLS ont √©t√© supprim√©es');
    console.log('‚úÖ RLS d√©sactiv√© pour maintenance_tasks');
    console.log('\n‚ö†Ô∏è  RAPPELS IMPORTANTS:');
    console.log('   - Tous les utilisateurs authentifi√©s peuvent acc√©der √† toutes les t√¢ches');
    console.log('   - Cette configuration est UNIQUEMENT pour le d√©veloppement');
    console.log('   - R√©activez RLS avant le d√©ploiement en production');
    console.log('   - Utilisez "node scripts/apply-rls-fix.js" pour restaurer la s√©curit√©');

  } catch (error) {
    console.error('\n‚ùå Erreur lors de la d√©sactivation RLS:', error.message);
    console.error('\nüîß Pour corriger manuellement:');
    console.error('   1. Connectez-vous √† votre base Supabase');
    console.error('   2. Ex√©cutez: ALTER TABLE maintenance_tasks DISABLE ROW LEVEL SECURITY;');
    console.error('   3. Supprimez les politiques manuellement si n√©cessaire');
    process.exit(1);
  }
}

// Point d'entr√©e principal
async function main() {
  await disableRLSForDevelopment();
}

main().catch(console.error);