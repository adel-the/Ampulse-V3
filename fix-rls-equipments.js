#!/usr/bin/env node

/**
 * Correction des policies RLS pour les √©quipements
 * Permet l'acc√®s complet aux tables equipments et hotel_equipments
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Variables d\'environnement Supabase manquantes');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

console.log('üîß CORRECTION RLS - √âquipements SoliReserve Enhanced');
console.log('=' .repeat(50));

const rlsPolicies = `
-- Activer RLS sur les tables
ALTER TABLE equipments ENABLE ROW LEVEL SECURITY;
ALTER TABLE hotel_equipments ENABLE ROW LEVEL SECURITY;

-- Supprimer les anciennes policies si elles existent
DROP POLICY IF EXISTS "Public access for equipments" ON equipments;
DROP POLICY IF EXISTS "Public access for hotel_equipments" ON hotel_equipments;
DROP POLICY IF EXISTS "equipments_select_policy" ON equipments;
DROP POLICY IF EXISTS "equipments_insert_policy" ON equipments;
DROP POLICY IF EXISTS "equipments_update_policy" ON equipments;
DROP POLICY IF EXISTS "equipments_delete_policy" ON equipments;

-- Policies pour equipments - Acc√®s complet pour tous
CREATE POLICY "equipments_select_policy" 
ON equipments FOR SELECT 
TO authenticated, anon 
USING (true);

CREATE POLICY "equipments_insert_policy" 
ON equipments FOR INSERT 
TO authenticated, anon 
WITH CHECK (true);

CREATE POLICY "equipments_update_policy" 
ON equipments FOR UPDATE 
TO authenticated, anon 
USING (true) 
WITH CHECK (true);

CREATE POLICY "equipments_delete_policy" 
ON equipments FOR DELETE 
TO authenticated, anon 
USING (true);

-- Policies pour hotel_equipments - Acc√®s complet pour tous
CREATE POLICY "hotel_equipments_select_policy" 
ON hotel_equipments FOR SELECT 
TO authenticated, anon 
USING (true);

CREATE POLICY "hotel_equipments_insert_policy" 
ON hotel_equipments FOR INSERT 
TO authenticated, anon 
WITH CHECK (true);

CREATE POLICY "hotel_equipments_update_policy" 
ON hotel_equipments FOR UPDATE 
TO authenticated, anon 
USING (true) 
WITH CHECK (true);

CREATE POLICY "hotel_equipments_delete_policy" 
ON hotel_equipments FOR DELETE 
TO authenticated, anon 
USING (true);

-- V√©rification des policies
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual, with_check 
FROM pg_policies 
WHERE tablename IN ('equipments', 'hotel_equipments') 
ORDER BY tablename, policyname;
`;

async function fixRLSPolicies() {
    console.log('üîß Application des corrections RLS...');
    
    try {
        // Ex√©cuter les requ√™tes SQL
        const statements = rlsPolicies
            .split(';')
            .map(stmt => stmt.trim())
            .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));

        for (const statement of statements) {
            if (statement.includes('SELECT')) {
                // Query pour la v√©rification finale
                const { data, error } = await supabase.rpc('exec_sql', { sql: statement });
                if (error) {
                    console.log(`‚ö†Ô∏è Requ√™te de v√©rification: ${error.message}`);
                } else if (data) {
                    console.log('‚úÖ Policies configur√©es:');
                    data.forEach(policy => {
                        console.log(`   - ${policy.tablename}.${policy.policyname} (${policy.cmd})`);
                    });
                }
            } else {
                // Requ√™tes de modification
                const { error } = await supabase.rpc('exec_sql', { sql: statement });
                if (error) {
                    console.log(`‚ö†Ô∏è ${statement.split(' ')[0]}: ${error.message}`);
                } else {
                    console.log(`‚úÖ ${statement.split(' ')[0]} appliqu√©`);
                }
            }
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'application des corrections:', error.message);
        return false;
    }
}

async function testAfterFix() {
    console.log('\nüß™ Test apr√®s correction...');
    
    try {
        // Test de lecture
        const { data: readData, error: readError } = await supabase
            .from('equipments')
            .select('*')
            .limit(1);
            
        if (readError) {
            console.log(`‚ùå Test lecture: ${readError.message}`);
            return false;
        }
        console.log('‚úÖ Lecture OK');
        
        // Test de cr√©ation
        const testEquipment = {
            name: `Test RLS Fix ${Date.now()}`,
            type: 'amenity',
            category: 'Test',
            description: 'Test apr√®s correction RLS',
            icon: 'Wrench',
            is_active: true,
            display_order: 999
        };
        
        const { data: createData, error: createError } = await supabase
            .from('equipments')
            .insert([testEquipment])
            .select()
            .single();
            
        if (createError) {
            console.log(`‚ùå Test cr√©ation: ${createError.message}`);
            return false;
        }
        console.log('‚úÖ Cr√©ation OK');
        
        // Test de suppression pour nettoyer
        const { error: deleteError } = await supabase
            .from('equipments')
            .delete()
            .eq('id', createData.id);
            
        if (deleteError) {
            console.log(`‚ö†Ô∏è Nettoyage: ${deleteError.message}`);
        } else {
            console.log('‚úÖ Suppression OK');
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erreur test:', error.message);
        return false;
    }
}

async function seedInitialEquipments() {
    console.log('\nüå± Ajout des √©quipements initiaux...');
    
    const initialEquipments = [
        {
            name: 'WiFi Gratuit',
            type: 'technology',
            category: 'Connectivit√©',
            description: 'Acc√®s internet WiFi gratuit dans tout l\'√©tablissement',
            icon: 'Wifi',
            is_active: true,
            display_order: 1
        },
        {
            name: 'T√©l√©vision',
            type: 'amenity',
            category: 'Divertissement',
            description: 'T√©l√©vision dans les chambres',
            icon: 'Tv',
            is_active: true,
            display_order: 2
        },
        {
            name: 'Machine √† caf√©',
            type: 'amenity',
            category: 'Boissons',
            description: 'Machine √† caf√©/th√© disponible',
            icon: 'Coffee',
            is_active: true,
            display_order: 3
        },
        {
            name: 'Parking',
            type: 'facility',
            category: 'Stationnement',
            description: 'Places de parking disponibles',
            icon: 'Car',
            is_active: true,
            display_order: 4
        },
        {
            name: 'Climatisation',
            type: 'amenity',
            category: 'Confort',
            description: 'Climatisation dans les chambres',
            icon: 'Wind',
            is_active: true,
            display_order: 5
        }
    ];
    
    try {
        // V√©rifier s'il y a d√©j√† des √©quipements
        const { data: existing, error: checkError } = await supabase
            .from('equipments')
            .select('id')
            .limit(1);
            
        if (checkError) {
            console.log(`‚ùå Erreur v√©rification: ${checkError.message}`);
            return false;
        }
        
        if (existing && existing.length > 0) {
            console.log('‚ÑπÔ∏è √âquipements d√©j√† pr√©sents, ignor√©');
            return true;
        }
        
        // Ins√©rer les √©quipements initiaux
        const { data, error } = await supabase
            .from('equipments')
            .insert(initialEquipments)
            .select();
            
        if (error) {
            console.log(`‚ùå Erreur insertion: ${error.message}`);
            return false;
        }
        
        console.log(`‚úÖ ${data.length} √©quipements initiaux ajout√©s`);
        data.forEach((eq, idx) => {
            console.log(`   ${idx + 1}. ${eq.name} (${eq.category})`);
        });
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erreur seed:', error.message);
        return false;
    }
}

async function runFix() {
    const startTime = Date.now();
    
    // √âtape 1: Correction RLS
    const fixSuccess = await fixRLSPolicies();
    if (!fixSuccess) {
        console.log('‚ùå √âchec de la correction RLS');
        return false;
    }
    
    // √âtape 2: Test apr√®s correction
    const testSuccess = await testAfterFix();
    if (!testSuccess) {
        console.log('‚ùå Tests toujours en √©chec apr√®s correction');
        return false;
    }
    
    // √âtape 3: Ajout d'√©quipements initiaux
    const seedSuccess = await seedInitialEquipments();
    
    const duration = Date.now() - startTime;
    
    console.log('\n' + '='.repeat(50));
    console.log('üìä **R√âSUM√â DE LA CORRECTION**');
    console.log('=' .repeat(50));
    console.log(`‚úÖ RLS Policies: ${fixSuccess ? 'Corrig√©' : '√âchec'}`);
    console.log(`‚úÖ Tests CRUD: ${testSuccess ? 'R√©ussi' : '√âchec'}`);
    console.log(`‚úÖ √âquipements initiaux: ${seedSuccess ? 'Ajout√©s' : '√âchec'}`);
    console.log(`‚è±Ô∏è Dur√©e: ${duration}ms`);
    
    if (fixSuccess && testSuccess) {
        console.log('\nüéâ **SYST√àME D\'√âQUIPEMENTS CORRIG√â ET FONCTIONNEL**');
        console.log('‚úÖ Plus d\'erreur 401/42501 (RLS)');
        console.log('‚úÖ Acc√®s complet aux tables equipments et hotel_equipments');
        console.log('‚úÖ Pr√™t pour l\'interface utilisateur');
        
        console.log('\nüéØ **PROCHAINES √âTAPES**');
        console.log('1. Tester l\'interface via http://localhost:3002');
        console.log('2. Aller dans Param√®tres ‚Üí √âquipements');
        console.log('3. V√©rifier que les √©quipements s\'affichent');
        console.log('4. Tester cr√©ation/modification/suppression');
    }
    
    console.log('\n' + '='.repeat(50));
    console.log(`üèÅ Correction termin√©e - ${new Date().toLocaleString()}`);
    console.log('=' .repeat(50));
    
    return fixSuccess && testSuccess;
}

// Ex√©cution
if (require.main === module) {
    runFix()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('‚ùå Erreur fatale:', error);
            process.exit(1);
        });
}

module.exports = { runFix };