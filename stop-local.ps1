# Script d'arr√™t pour Ampulse V3 et Supabase Local
# Auteur: Claude Code Assistant
# Date: 26 Ao√ªt 2025

Write-Host "üõë Arr√™t d'Ampulse V3 et Supabase Local..." -ForegroundColor Yellow

# Arr√™t de Supabase
Write-Host "`n1Ô∏è‚É£ Arr√™t de Supabase..." -ForegroundColor Yellow
try {
    supabase stop
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Supabase arr√™t√© avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Erreur lors de l'arr√™t de Supabase" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ö†Ô∏è Supabase CLI non trouv√© ou d√©j√† arr√™t√©" -ForegroundColor Yellow
}

# V√©rification des ports et processus Node.js
Write-Host "`n2Ô∏è‚É£ Nettoyage des processus Node.js..." -ForegroundColor Yellow

# Trouver et tuer les processus Node.js sur les ports utilis√©s
$ports = @(3000, 15421, 15432, 15433)

foreach ($port in $ports) {
    $processes = netstat -ano | findstr ":$port " | ForEach-Object {
        $fields = $_ -split '\s+'
        if ($fields.Count -ge 5) {
            return $fields[4]
        }
    } | Where-Object { $_ -match '^\d+$' } | Select-Object -Unique
    
    foreach ($pid in $processes) {
        try {
            $process = Get-Process -Id $pid -ErrorAction SilentlyContinue
            if ($process -and $process.ProcessName -match "node|next|docker") {
                Write-Host "   üîÑ Arr√™t du processus $($process.ProcessName) (PID: $pid)" -ForegroundColor Gray
                Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue
            }
        } catch {
            # Ignore les erreurs si le processus n'existe plus
        }
    }
}

Write-Host "   ‚úÖ Nettoyage termin√©" -ForegroundColor Green

# Affichage du statut
Write-Host "`n3Ô∏è‚É£ V√©rification des ports..." -ForegroundColor Yellow

function Test-Port {
    param([int]$Port)
    try {
        $connection = New-Object System.Net.Sockets.TcpClient
        $connection.Connect("127.0.0.1", $Port)
        $connection.Close()
        return $true
    }
    catch {
        return $false
    }
}

$stillUsed = @()
foreach ($port in $ports) {
    if (Test-Port $port) {
        $stillUsed += $port
    }
}

if ($stillUsed.Count -eq 0) {
    Write-Host "   ‚úÖ Tous les ports sont libres" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è Ports encore utilis√©s: $($stillUsed -join ', ')" -ForegroundColor Yellow
    Write-Host "   üí° Vous pouvez les lib√©rer manuellement avec:" -ForegroundColor Cyan
    Write-Host "      netstat -ano | findstr :<PORT>" -ForegroundColor Gray
    Write-Host "      taskkill /PID <PID> /F" -ForegroundColor Gray
}

Write-Host "`n‚úÖ Arr√™t termin√©!" -ForegroundColor Green
Write-Host "   Pour red√©marrer, utilisez: .\start-local.ps1" -ForegroundColor Cyan

Read-Host "`nAppuyez sur Entr√©e pour fermer"