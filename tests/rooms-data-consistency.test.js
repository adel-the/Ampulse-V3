/**
 * TESTS DE COH√âRENCE DES DONN√âES - API ROOMS
 * 
 * Tests sp√©cialis√©s pour valider la coh√©rence et l'int√©grit√©
 * des donn√©es apr√®s chaque op√©ration CRUD.
 * 
 * OBJECTIFS :
 * - V√©rifier l'int√©grit√© des donn√©es apr√®s chaque op√©ration
 * - Valider la coh√©rence des relations entre entit√©s
 * - Tester les contraintes d'int√©grit√© r√©f√©rentielle
 * - Valider les triggers et les r√®gles m√©tier
 * - V√©rifier la synchronisation des donn√©es
 */

const { createClient } = require('@supabase/supabase-js');

const TEST_CONFIG = {
  supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://pgjatiookprsvfesrsrx.supabase.co',
  supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBnamF0aW9va3Byc3ZmZXNyc3J4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0NTkxMDksImV4cCI6MjA3MTAzNTEwOX0.J60Qcxtw1SmnR9WrS8t4yCIh-JyyhjAmU_FZmFIY_dI',
  testHotelId: 1
};

const supabase = createClient(TEST_CONFIG.supabaseUrl, TEST_CONFIG.supabaseKey);

class DataConsistencyTestUtils {
  static log(category, message, status = 'info') {
    const icons = { info: 'üìã', success: '‚úÖ', error: '‚ùå', warning: '‚ö†Ô∏è', consistency: 'üîó' };
    console.log(`${icons[status]} [${category}] ${message}`);
  }

  static generateTestRoom(suffix = '') {
    return {
      hotel_id: TEST_CONFIG.testHotelId,
      numero: `CONS-${Date.now()}-${Math.random().toString(36).substr(2, 5)}${suffix}`,
      type: 'Consistency Test',
      prix: 75.00,
      statut: 'disponible',
      description: 'Chambre de test de coh√©rence des donn√©es',
      floor: 2,
      room_size: 25.0,
      bed_type: 'double',
      view_type: 'jardin',
      is_smoking: false,
      amenities: ['WiFi', 'TV', 'Climatisation'],
      images: [{ url: 'test.jpg', alt: 'Test image' }],
      notes: 'Test de coh√©rence'
    };
  }

  /**
   * V√©rifie l'int√©grit√© d'une chambre
   */
  static async validateRoomIntegrity(roomId, expectedData = {}) {
    const { data: room, error } = await supabase
      .from('rooms')
      .select('*')
      .eq('id', roomId)
      .single();

    if (error) {
      throw new Error(`Impossible de r√©cup√©rer la chambre ${roomId}: ${error.message}`);
    }

    const issues = [];

    // V√©rifications de base
    if (!room.numero || room.numero.trim() === '') {
      issues.push('Num√©ro de chambre vide');
    }

    if (!room.type || room.type.trim() === '') {
      issues.push('Type de chambre vide');
    }

    if (typeof room.prix !== 'number' || room.prix < 0) {
      issues.push('Prix invalide');
    }

    if (!['disponible', 'occupee', 'maintenance'].includes(room.statut)) {
      issues.push('Statut invalide');
    }

    // V√©rifications des timestamps
    if (!room.created_at || isNaN(new Date(room.created_at).getTime())) {
      issues.push('created_at invalide');
    }

    if (!room.updated_at || isNaN(new Date(room.updated_at).getTime())) {
      issues.push('updated_at invalide');
    }

    if (new Date(room.updated_at) < new Date(room.created_at)) {
      issues.push('updated_at ant√©rieur √† created_at');
    }

    // V√©rifications des donn√©es JSON
    if (room.amenities !== null && !Array.isArray(room.amenities)) {
      issues.push('amenities doit √™tre un array ou null');
    }

    if (room.images !== null && !Array.isArray(room.images)) {
      issues.push('images doit √™tre un array ou null');
    }

    // V√©rifications des contraintes num√©riques
    if (room.floor !== null && (typeof room.floor !== 'number' || room.floor < 0)) {
      issues.push('Floor invalide');
    }

    if (room.room_size !== null && (typeof room.room_size !== 'number' || room.room_size <= 0)) {
      issues.push('room_size invalide');
    }

    // Comparaison avec les donn√©es attendues
    for (const [key, expectedValue] of Object.entries(expectedData)) {
      if (room[key] !== expectedValue) {
        issues.push(`${key}: attendu ${expectedValue}, trouv√© ${room[key]}`);
      }
    }

    return {
      valid: issues.length === 0,
      issues: issues,
      room: room
    };
  }

  /**
   * V√©rifie la coh√©rence de l'h√¥tel et de ses chambres
   */
  static async validateHotelRoomsConsistency(hotelId) {
    // V√©rifier que l'h√¥tel existe
    const { data: hotel, error: hotelError } = await supabase
      .from('hotels')
      .select('id, nom')
      .eq('id', hotelId)
      .single();

    if (hotelError) {
      throw new Error(`H√¥tel ${hotelId} introuvable: ${hotelError.message}`);
    }

    // R√©cup√©rer toutes les chambres de l'h√¥tel
    const { data: rooms, error: roomsError } = await supabase
      .from('rooms')
      .select('*')
      .eq('hotel_id', hotelId);

    if (roomsError) {
      throw new Error(`Erreur r√©cup√©ration chambres: ${roomsError.message}`);
    }

    const issues = [];

    // V√©rifier l'unicit√© des num√©ros de chambre
    const roomNumbers = rooms.map(r => r.numero);
    const duplicateNumbers = roomNumbers.filter((num, index) => roomNumbers.indexOf(num) !== index);
    if (duplicateNumbers.length > 0) {
      issues.push(`Num√©ros de chambre dupliqu√©s: ${[...new Set(duplicateNumbers)].join(', ')}`);
    }

    // V√©rifier que toutes les chambres appartiennent bien √† l'h√¥tel
    const incorrectHotelRooms = rooms.filter(r => r.hotel_id !== hotelId);
    if (incorrectHotelRooms.length > 0) {
      issues.push(`Chambres avec hotel_id incorrect: ${incorrectHotelRooms.map(r => r.numero).join(', ')}`);
    }

    // V√©rifier la coh√©rence des donn√©es de chaque chambre
    for (const room of rooms) {
      const roomValidation = await this.validateRoomIntegrity(room.id);
      if (!roomValidation.valid) {
        issues.push(`Chambre ${room.numero}: ${roomValidation.issues.join(', ')}`);
      }
    }

    return {
      valid: issues.length === 0,
      issues: issues,
      hotel: hotel,
      roomCount: rooms.length
    };
  }

  /**
   * V√©rifie l'√©tat de la base de donn√©es avant et apr√®s une op√©ration
   */
  static async captureDbState(description = '') {
    const { data: rooms, error } = await supabase
      .from('rooms')
      .select('*')
      .eq('hotel_id', TEST_CONFIG.testHotelId)
      .order('id');

    if (error) {
      throw new Error(`Erreur capture √©tat DB: ${error.message}`);
    }

    const state = {
      timestamp: Date.now(),
      description: description,
      roomCount: rooms.length,
      rooms: rooms,
      roomsByStatus: {
        disponible: rooms.filter(r => r.statut === 'disponible').length,
        occupee: rooms.filter(r => r.statut === 'occupee').length,
        maintenance: rooms.filter(r => r.statut === 'maintenance').length
      },
      totalValue: rooms.reduce((sum, r) => sum + (r.prix || 0), 0),
      roomNumbers: rooms.map(r => r.numero).sort()
    };

    return state;
  }

  /**
   * Compare deux √©tats de base de donn√©es
   */
  static compareDbStates(stateBefore, stateAfter, expectedChanges = {}) {
    const issues = [];

    // Comparaison du nombre de chambres
    const roomCountDiff = stateAfter.roomCount - stateBefore.roomCount;
    if (expectedChanges.roomCountChange !== undefined && roomCountDiff !== expectedChanges.roomCountChange) {
      issues.push(`Changement de nombre de chambres incorrect: attendu ${expectedChanges.roomCountChange}, trouv√© ${roomCountDiff}`);
    }

    // Comparaison des num√©ros de chambre
    const newRooms = stateAfter.roomNumbers.filter(num => !stateBefore.roomNumbers.includes(num));
    const deletedRooms = stateBefore.roomNumbers.filter(num => !stateAfter.roomNumbers.includes(num));

    if (expectedChanges.newRooms !== undefined && newRooms.length !== expectedChanges.newRooms) {
      issues.push(`Nouvelles chambres: attendu ${expectedChanges.newRooms}, trouv√© ${newRooms.length}`);
    }

    if (expectedChanges.deletedRooms !== undefined && deletedRooms.length !== expectedChanges.deletedRooms) {
      issues.push(`Chambres supprim√©es: attendu ${expectedChanges.deletedRooms}, trouv√© ${deletedRooms.length}`);
    }

    // Comparaison des statuts
    for (const status of ['disponible', 'occupee', 'maintenance']) {
      const statusDiff = stateAfter.roomsByStatus[status] - stateBefore.roomsByStatus[status];
      if (expectedChanges[`${status}Change`] !== undefined && statusDiff !== expectedChanges[`${status}Change`]) {
        issues.push(`Changement statut ${status}: attendu ${expectedChanges[`${status}Change`]}, trouv√© ${statusDiff}`);
      }
    }

    return {
      valid: issues.length === 0,
      issues: issues,
      changes: {
        roomCount: roomCountDiff,
        newRooms: newRooms,
        deletedRooms: deletedRooms,
        statusChanges: {
          disponible: stateAfter.roomsByStatus.disponible - stateBefore.roomsByStatus.disponible,
          occupee: stateAfter.roomsByStatus.occupee - stateBefore.roomsByStatus.occupee,
          maintenance: stateAfter.roomsByStatus.maintenance - stateBefore.roomsByStatus.maintenance
        }
      }
    };
  }

  static async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

/**
 * TESTS DE COH√âRENCE POUR LES OP√âRATIONS CREATE
 */
class CreateConsistencyTests {
  static async runAll() {
    DataConsistencyTestUtils.log('CONS-CREATE', 'Tests de coh√©rence CREATE', 'consistency');
    
    const results = { passed: 0, failed: 0, details: [] };
    const tests = [
      this.testCreateIntegrity,
      this.testCreateUniqueConstraints,
      this.testCreateTimestamps,
      this.testCreateDefaultValues,
      this.testCreateRelationalIntegrity,
      this.testCreateDataConsistency,
      this.testCreateBatchConsistency,
      this.testCreateRollbackConsistency
    ];

    for (const test of tests) {
      try {
        await test();
        results.passed++;
        DataConsistencyTestUtils.log('CONS-CREATE', `${test.name} - R√âUSSI`, 'success');
      } catch (error) {
        results.failed++;
        results.details.push({ test: test.name, error: error.message });
        DataConsistencyTestUtils.log('CONS-CREATE', `${test.name} - √âCHEC: ${error.message}`, 'error');
      }
    }

    return results;
  }

  static async testCreateIntegrity() {
    const stateBefore = await DataConsistencyTestUtils.captureDbState('Avant cr√©ation');
    
    const roomData = DataConsistencyTestUtils.generateTestRoom('-integrity');
    
    const { data: created, error } = await supabase
      .from('rooms')
      .insert(roomData)
      .select()
      .single();

    if (error) throw new Error(`Erreur cr√©ation: ${error.message}`);

    try {
      // V√©rifier l'int√©grit√© de la chambre cr√©√©e
      const integrity = await DataConsistencyTestUtils.validateRoomIntegrity(created.id, {
        numero: roomData.numero,
        type: roomData.type,
        prix: roomData.prix,
        hotel_id: roomData.hotel_id
      });

      if (!integrity.valid) {
        throw new Error(`Int√©grit√© √©chou√©e: ${integrity.issues.join(', ')}`);
      }

      // V√©rifier l'√©tat de la base de donn√©es
      const stateAfter = await DataConsistencyTestUtils.captureDbState('Apr√®s cr√©ation');
      const comparison = DataConsistencyTestUtils.compareDbStates(stateBefore, stateAfter, {
        roomCountChange: 1,
        newRooms: 1,
        disponibleChange: 1
      });

      if (!comparison.valid) {
        throw new Error(`√âtat DB incoh√©rent: ${comparison.issues.join(', ')}`);
      }

      // V√©rifier la coh√©rence globale de l'h√¥tel
      const hotelConsistency = await DataConsistencyTestUtils.validateHotelRoomsConsistency(TEST_CONFIG.testHotelId);
      if (!hotelConsistency.valid) {
        throw new Error(`Coh√©rence h√¥tel √©chou√©e: ${hotelConsistency.issues.join(', ')}`);
      }
    } finally {
      await supabase.from('rooms').delete().eq('id', created.id);
    }
  }

  static async testCreateUniqueConstraints() {
    const roomData = DataConsistencyTestUtils.generateTestRoom('-unique');
    
    // Premi√®re cr√©ation
    const { data: first, error: firstError } = await supabase
      .from('rooms')
      .insert(roomData)
      .select()
      .single();

    if (firstError) throw new Error(`Erreur premi√®re cr√©ation: ${firstError.message}`);

    try {
      // Tentative de cr√©ation avec le m√™me num√©ro
      const { error: duplicateError } = await supabase
        .from('rooms')
        .insert(roomData);

      if (!duplicateError) {
        throw new Error('Contrainte d\'unicit√© non respect√©e');
      }

      // V√©rifier que la premi√®re chambre existe toujours
      const integrity = await DataConsistencyTestUtils.validateRoomIntegrity(first.id);
      if (!integrity.valid) {
        throw new Error('Premi√®re chambre corrompue apr√®s tentative de doublon');
      }

      // V√©rifier qu'il n'y a qu'une seule chambre avec ce num√©ro
      const { data: duplicates, error: checkError } = await supabase
        .from('rooms')
        .select('id')
        .eq('hotel_id', TEST_CONFIG.testHotelId)
        .eq('numero', roomData.numero);

      if (checkError) throw new Error(`Erreur v√©rification doublons: ${checkError.message}`);
      if (duplicates.length !== 1) {
        throw new Error(`Nombre incorrect de chambres avec le num√©ro ${roomData.numero}: ${duplicates.length}`);
      }
    } finally {
      await supabase.from('rooms').delete().eq('id', first.id);
    }
  }

  static async testCreateTimestamps() {
    const beforeCreate = new Date();
    await DataConsistencyTestUtils.delay(100); // Assurer une diff√©rence de timestamp
    
    const roomData = DataConsistencyTestUtils.generateTestRoom('-timestamps');
    
    const { data: created, error } = await supabase
      .from('rooms')
      .insert(roomData)
      .select()
      .single();

    if (error) throw new Error(`Erreur cr√©ation: ${error.message}`);

    try {
      const afterCreate = new Date();
      const createdAt = new Date(created.created_at);
      const updatedAt = new Date(created.updated_at);

      // V√©rifier que created_at est dans la bonne plage
      if (createdAt < beforeCreate || createdAt > afterCreate) {
        throw new Error(`created_at hors plage: ${created.created_at}`);
      }

      // V√©rifier que updated_at est coh√©rent avec created_at
      if (Math.abs(updatedAt.getTime() - createdAt.getTime()) > 1000) {
        throw new Error('updated_at trop diff√©rent de created_at √† la cr√©ation');
      }

      // V√©rifier le format ISO
      if (!created.created_at.includes('T') || !created.updated_at.includes('T')) {
        throw new Error('Timestamps pas au format ISO');
      }
    } finally {
      await supabase.from('rooms').delete().eq('id', created.id);
    }
  }

  static async testCreateDefaultValues() {
    // Test avec donn√©es minimales
    const minimalData = {
      hotel_id: TEST_CONFIG.testHotelId,
      numero: `DEF-${Date.now()}`,
      type: 'Default Test',
      prix: 50.00
    };

    const { data: created, error } = await supabase
      .from('rooms')
      .insert(minimalData)
      .select()
      .single();

    if (error) throw new Error(`Erreur cr√©ation minimale: ${error.message}`);

    try {
      // V√©rifier les valeurs par d√©faut
      if (created.statut !== 'disponible') {
        throw new Error(`Statut par d√©faut incorrect: ${created.statut}`);
      }

      if (created.is_smoking !== false) {
        throw new Error(`is_smoking par d√©faut incorrect: ${created.is_smoking}`);
      }

      if (!Array.isArray(created.amenities) || created.amenities.length !== 0) {
        if (created.amenities !== null) {
          throw new Error(`amenities par d√©faut incorrect: ${created.amenities}`);
        }
      }

      if (!Array.isArray(created.images) || created.images.length !== 0) {
        if (created.images !== null) {
          throw new Error(`images par d√©faut incorrect: ${created.images}`);
        }
      }

      // V√©rifier l'int√©grit√© globale
      const integrity = await DataConsistencyTestUtils.validateRoomIntegrity(created.id);
      if (!integrity.valid) {
        throw new Error(`Int√©grit√© valeurs par d√©faut √©chou√©e: ${integrity.issues.join(', ')}`);
      }
    } finally {
      await supabase.from('rooms').delete().eq('id', created.id);
    }
  }

  static async testCreateRelationalIntegrity() {
    // V√©rifier que la cr√©ation avec un hotel_id invalide √©choue
    const invalidRoomData = {
      ...DataConsistencyTestUtils.generateTestRoom('-invalid-hotel'),
      hotel_id: 99999
    };

    const { error: invalidError } = await supabase
      .from('rooms')
      .insert(invalidRoomData);

    if (!invalidError) {
      throw new Error('Cr√©ation avec hotel_id invalide autoris√©e');
    }

    // V√©rifier que la cr√©ation avec un hotel_id valide r√©ussit
    const validRoomData = DataConsistencyTestUtils.generateTestRoom('-valid-hotel');
    
    const { data: created, error: validError } = await supabase
      .from('rooms')
      .insert(validRoomData)
      .select()
      .single();

    if (validError) throw new Error(`Erreur cr√©ation valide: ${validError.message}`);

    try {
      // V√©rifier la relation
      const { data: hotelCheck, error: hotelError } = await supabase
        .from('hotels')
        .select('id')
        .eq('id', created.hotel_id)
        .single();

      if (hotelError || !hotelCheck) {
        throw new Error('Relation hotel inexistante apr√®s cr√©ation chambre');
      }

      // V√©rifier que la chambre est bien li√©e √† l'h√¥tel
      if (created.hotel_id !== validRoomData.hotel_id) {
        throw new Error('hotel_id modifi√© lors de la cr√©ation');
      }
    } finally {
      await supabase.from('rooms').delete().eq('id', created.id);
    }
  }

  static async testCreateDataConsistency() {
    const complexData = {
      ...DataConsistencyTestUtils.generateTestRoom('-complex'),
      amenities: ['WiFi', { type: 'TV', model: '4K' }, 'Climatisation'],
      images: [
        { url: 'room1.jpg', alt: 'Vue principale', metadata: { size: 1024, format: 'jpeg' } },
        { url: 'room2.jpg', alt: 'Salle de bain' }
      ],
      prix: 123.456789, // Test pr√©cision
      room_size: 25.555555
    };

    const { data: created, error } = await supabase
      .from('rooms')
      .insert(complexData)
      .select()
      .single();

    if (error) throw new Error(`Erreur cr√©ation complexe: ${error.message}`);

    try {
      // V√©rifier la pr√©servation des donn√©es complexes
      if (!Array.isArray(created.amenities) || created.amenities.length !== complexData.amenities.length) {
        throw new Error('Amenities complexes non pr√©serv√©es');
      }

      if (!Array.isArray(created.images) || created.images.length !== complexData.images.length) {
        throw new Error('Images complexes non pr√©serv√©es');
      }

      // V√©rifier la structure des objets complexes
      const tvAmenity = created.amenities.find(a => typeof a === 'object' && a.type === 'TV');
      if (!tvAmenity || tvAmenity.model !== '4K') {
        throw new Error('Objet complexe dans amenities corrompu');
      }

      const imageWithMetadata = created.images.find(img => img.metadata);
      if (!imageWithMetadata || imageWithMetadata.metadata.size !== 1024) {
        throw new Error('M√©tadonn√©es d\'image corrompues');
      }

      // V√©rifier la pr√©cision num√©rique
      const priceDiff = Math.abs(created.prix - complexData.prix);
      if (priceDiff > 0.01) {
        DataConsistencyTestUtils.log('CONS-CREATE', 
          `Pr√©cision prix modifi√©e: ${complexData.prix} ‚Üí ${created.prix}`, 
          'warning'
        );
      }
    } finally {
      await supabase.from('rooms').delete().eq('id', created.id);
    }
  }

  static async testCreateBatchConsistency() {
    const batchSize = 5;
    const roomsData = Array.from({ length: batchSize }, (_, i) => 
      DataConsistencyTestUtils.generateTestRoom(`-batch-${i}`)
    );

    const stateBefore = await DataConsistencyTestUtils.captureDbState('Avant batch create');

    const { data: created, error } = await supabase
      .from('rooms')
      .insert(roomsData)
      .select();

    if (error) throw new Error(`Erreur batch create: ${error.message}`);

    try {
      // V√©rifier que toutes les chambres ont √©t√© cr√©√©es
      if (created.length !== batchSize) {
        throw new Error(`Nombre incorrect de chambres cr√©√©es: ${created.length}/${batchSize}`);
      }

      // V√©rifier l'int√©grit√© de chaque chambre
      for (let i = 0; i < created.length; i++) {
        const room = created[i];
        const originalData = roomsData[i];
        
        const integrity = await DataConsistencyTestUtils.validateRoomIntegrity(room.id, {
          numero: originalData.numero,
          type: originalData.type,
          prix: originalData.prix
        });

        if (!integrity.valid) {
          throw new Error(`Int√©grit√© chambre ${i} √©chou√©e: ${integrity.issues.join(', ')}`);
        }
      }

      // V√©rifier l'√©tat global
      const stateAfter = await DataConsistencyTestUtils.captureDbState('Apr√®s batch create');
      const comparison = DataConsistencyTestUtils.compareDbStates(stateBefore, stateAfter, {
        roomCountChange: batchSize,
        newRooms: batchSize,
        disponibleChange: batchSize
      });

      if (!comparison.valid) {
        throw new Error(`√âtat batch incoh√©rent: ${comparison.issues.join(', ')}`);
      }

      // V√©rifier l'unicit√© des num√©ros dans le batch
      const batchNumbers = created.map(r => r.numero);
      const uniqueNumbers = [...new Set(batchNumbers)];
      if (uniqueNumbers.length !== batchNumbers.length) {
        throw new Error('Num√©ros dupliqu√©s dans le batch');
      }
    } finally {
      const ids = created.map(room => room.id);
      await supabase.from('rooms').delete().in('id', ids);
    }
  }

  static async testCreateRollbackConsistency() {
    const stateBefore = await DataConsistencyTestUtils.captureDbState('Avant rollback test');

    // Tentative de cr√©ation avec des donn√©es qui devraient √©chouer
    const invalidData = [
      DataConsistencyTestUtils.generateTestRoom('-rollback-1'),
      {
        ...DataConsistencyTestUtils.generateTestRoom('-rollback-2'),
        prix: -100 // Prix invalide qui devrait faire √©chouer la transaction
      }
    ];

    const { error } = await supabase
      .from('rooms')
      .insert(invalidData);

    // L'op√©ration devrait √©chouer
    if (!error) {
      // Si elle n'√©choue pas, nettoyer manuellement
      const { data: toClean } = await supabase
        .from('rooms')
        .select('id')
        .in('numero', invalidData.map(r => r.numero));
      
      if (toClean && toClean.length > 0) {
        await supabase.from('rooms').delete().in('id', toClean.map(r => r.id));
      }
      
      throw new Error('Transaction invalide non rejet√©e');
    }

    // V√©rifier que l'√©tat n'a pas chang√©
    const stateAfter = await DataConsistencyTestUtils.captureDbState('Apr√®s rollback test');
    const comparison = DataConsistencyTestUtils.compareDbStates(stateBefore, stateAfter, {
      roomCountChange: 0,
      newRooms: 0
    });

    if (!comparison.valid) {
      throw new Error(`√âtat apr√®s rollback incoh√©rent: ${comparison.issues.join(', ')}`);
    }

    // V√©rifier qu'aucune des chambres n'existe
    const { data: orphanedRooms } = await supabase
      .from('rooms')
      .select('numero')
      .in('numero', invalidData.map(r => r.numero));

    if (orphanedRooms && orphanedRooms.length > 0) {
      throw new Error(`Chambres orphelines apr√®s rollback: ${orphanedRooms.map(r => r.numero).join(', ')}`);
    }
  }
}

/**
 * TESTS DE COH√âRENCE POUR LES OP√âRATIONS UPDATE
 */
class UpdateConsistencyTests {
  static async runAll() {
    DataConsistencyTestUtils.log('CONS-UPDATE', 'Tests de coh√©rence UPDATE', 'consistency');
    
    const results = { passed: 0, failed: 0, details: [] };
    const tests = [
      this.testUpdateIntegrity,
      this.testUpdateTimestampConsistency,
      this.testUpdateConstraintConsistency,
      this.testUpdateDataConsistency,
      this.testUpdateConcurrencyConsistency,
      this.testUpdatePartialConsistency
    ];

    for (const test of tests) {
      try {
        await test();
        results.passed++;
        DataConsistencyTestUtils.log('CONS-UPDATE', `${test.name} - R√âUSSI`, 'success');
      } catch (error) {
        results.failed++;
        results.details.push({ test: test.name, error: error.message });
        DataConsistencyTestUtils.log('CONS-UPDATE', `${test.name} - √âCHEC: ${error.message}`, 'error');
      }
    }

    return results;
  }

  static async testUpdateIntegrity() {
    // Cr√©er une chambre de test
    const roomData = DataConsistencyTestUtils.generateTestRoom('-update-integrity');
    const { data: created, error: createError } = await supabase
      .from('rooms')
      .insert(roomData)
      .select()
      .single();

    if (createError) throw new Error(`Erreur cr√©ation: ${createError.message}`);

    try {
      const updateData = {
        prix: 150.00,
        statut: 'maintenance',
        description: 'Chambre mise √† jour',
        amenities: ['WiFi Premium', 'TV 4K', 'Spa']
      };

      const { data: updated, error: updateError } = await supabase
        .from('rooms')
        .update(updateData)
        .eq('id', created.id)
        .select()
        .single();

      if (updateError) throw new Error(`Erreur update: ${updateError.message}`);

      // V√©rifier l'int√©grit√© apr√®s mise √† jour
      const integrity = await DataConsistencyTestUtils.validateRoomIntegrity(updated.id, {
        id: created.id,
        numero: created.numero, // Ne doit pas changer
        hotel_id: created.hotel_id, // Ne doit pas changer
        prix: updateData.prix,
        statut: updateData.statut,
        description: updateData.description
      });

      if (!integrity.valid) {
        throw new Error(`Int√©grit√© update √©chou√©e: ${integrity.issues.join(', ')}`);
      }

      // V√©rifier que created_at n'a pas chang√©
      if (updated.created_at !== created.created_at) {
        throw new Error('created_at modifi√© lors de l\'update');
      }

      // V√©rifier que updated_at a √©t√© mis √† jour
      if (new Date(updated.updated_at) <= new Date(created.updated_at)) {
        throw new Error('updated_at non mis √† jour');
      }
    } finally {
      await supabase.from('rooms').delete().eq('id', created.id);
    }
  }

  static async testUpdateTimestampConsistency() {
    const roomData = DataConsistencyTestUtils.generateTestRoom('-timestamp-consistency');
    const { data: created, error: createError } = await supabase
      .from('rooms')
      .insert(roomData)
      .select()
      .single();

    if (createError) throw new Error(`Erreur cr√©ation: ${createError.message}`);

    try {
      const originalCreatedAt = created.created_at;
      const originalUpdatedAt = created.updated_at;

      // Attendre un peu pour assurer une diff√©rence de timestamp
      await DataConsistencyTestUtils.delay(1000);

      const { data: updated, error: updateError } = await supabase
        .from('rooms')
        .update({ description: 'Timestamp test' })
        .eq('id', created.id)
        .select()
        .single();

      if (updateError) throw new Error(`Erreur update: ${updateError.message}`);

      // V√©rifications des timestamps
      if (updated.created_at !== originalCreatedAt) {
        throw new Error('created_at ne doit pas changer lors d\'un update');
      }

      if (new Date(updated.updated_at) <= new Date(originalUpdatedAt)) {
        throw new Error('updated_at non actualis√©');
      }

      const timeDiff = new Date(updated.updated_at) - new Date(originalUpdatedAt);
      if (timeDiff < 900) { // Au moins 900ms de diff√©rence
        throw new Error(`Diff√©rence de timestamp insuffisante: ${timeDiff}ms`);
      }

      // Nouvelle mise √† jour pour tester la coh√©rence continue
      await DataConsistencyTestUtils.delay(500);

      const { data: updated2, error: updateError2 } = await supabase
        .from('rooms')
        .update({ notes: 'Second update' })
        .eq('id', created.id)
        .select()
        .single();

      if (updateError2) throw new Error(`Erreur second update: ${updateError2.message}`);

      if (new Date(updated2.updated_at) <= new Date(updated.updated_at)) {
        throw new Error('updated_at non actualis√© au second update');
      }
    } finally {
      await supabase.from('rooms').delete().eq('id', created.id);
    }
  }

  static async testUpdateConstraintConsistency() {
    // Cr√©er deux chambres pour tester les contraintes
    const room1Data = DataConsistencyTestUtils.generateTestRoom('-constraint1');
    const room2Data = DataConsistencyTestUtils.generateTestRoom('-constraint2');

    const { data: room1, error: error1 } = await supabase
      .from('rooms')
      .insert(room1Data)
      .select()
      .single();

    const { data: room2, error: error2 } = await supabase
      .from('rooms')
      .insert(room2Data)
      .select()
      .single();

    if (error1 || error2) throw new Error('Erreur cr√©ation chambres test');

    try {
      // Tentative de violer la contrainte d'unicit√©
      const { error: constraintError } = await supabase
        .from('rooms')
        .update({ numero: room1.numero })
        .eq('id', room2.id);

      if (!constraintError) {
        throw new Error('Violation contrainte unicit√© non d√©tect√©e');
      }

      // V√©rifier que les deux chambres sont intactes
      const integrity1 = await DataConsistencyTestUtils.validateRoomIntegrity(room1.id);
      const integrity2 = await DataConsistencyTestUtils.validateRoomIntegrity(room2.id);

      if (!integrity1.valid) {
        throw new Error(`Room1 corrompue: ${integrity1.issues.join(', ')}`);
      }

      if (!integrity2.valid) {
        throw new Error(`Room2 corrompue: ${integrity2.issues.join(', ')}`);
      }

      // V√©rifier que room2 n'a pas √©t√© modifi√©e
      if (integrity2.room.numero === room1.numero) {
        throw new Error('Contrainte unicit√© viol√©e');
      }
    } finally {
      await supabase.from('rooms').delete().in('id', [room1.id, room2.id]);
    }
  }

  static async testUpdateDataConsistency() {
    const roomData = DataConsistencyTestUtils.generateTestRoom('-data-consistency');
    const { data: created, error: createError } = await supabase
      .from('rooms')
      .insert(roomData)
      .select()
      .single();

    if (createError) throw new Error(`Erreur cr√©ation: ${createError.message}`);

    try {
      // Update avec donn√©es complexes
      const complexUpdate = {
        amenities: [
          'WiFi Ultra',
          { type: 'TV', model: 'OLED 65"', features: ['4K', 'HDR', 'Smart'] },
          { type: 'Spa', equipment: ['Jacuzzi', 'Sauna'] }
        ],
        images: [
          { 
            url: 'updated1.jpg', 
            alt: 'Vue mise √† jour',
            metadata: { 
              lastModified: new Date().toISOString(),
              editor: 'auto-update-test' 
            }
          }
        ],
        prix: 199.99
      };

      const { data: updated, error: updateError } = await supabase
        .from('rooms')
        .update(complexUpdate)
        .eq('id', created.id)
        .select()
        .single();

      if (updateError) throw new Error(`Erreur update complexe: ${updateError.message}`);

      // V√©rifier la pr√©servation des donn√©es complexes
      if (!Array.isArray(updated.amenities) || updated.amenities.length !== 3) {
        throw new Error('Amenities complexes non pr√©serv√©es');
      }

      const tvAmenity = updated.amenities.find(a => typeof a === 'object' && a.type === 'TV');
      if (!tvAmenity || !tvAmenity.features || tvAmenity.features.length !== 3) {
        throw new Error('Objet TV complexe corrompu');
      }

      if (!Array.isArray(updated.images) || updated.images.length !== 1) {
        throw new Error('Images non pr√©serv√©es');
      }

      const image = updated.images[0];
      if (!image.metadata || !image.metadata.lastModified) {
        throw new Error('M√©tadonn√©es image non pr√©serv√©es');
      }

      // Test de s√©rialisation/d√©s√©rialisation
      const serialized = JSON.stringify(updated);
      const deserialized = JSON.parse(serialized);
      
      if (deserialized.amenities[1].features.length !== 3) {
        throw new Error('S√©rialisation/d√©s√©rialisation corrompue');
      }
    } finally {
      await supabase.from('rooms').delete().eq('id', created.id);
    }
  }

  static async testUpdateConcurrencyConsistency() {
    const roomData = DataConsistencyTestUtils.generateTestRoom('-concurrency');
    const { data: created, error: createError } = await supabase
      .from('rooms')
      .insert(roomData)
      .select()
      .single();

    if (createError) throw new Error(`Erreur cr√©ation: ${createError.message}`);

    try {
      // Simuler des updates concurrents
      const updates = [
        { prix: 100, description: 'Update 1' },
        { prix: 150, description: 'Update 2' },
        { prix: 200, description: 'Update 3' }
      ];

      const updatePromises = updates.map(updateData => 
        supabase
          .from('rooms')
          .update(updateData)
          .eq('id', created.id)
          .select()
          .single()
      );

      const results = await Promise.all(updatePromises);

      // V√©rifier qu'au moins un update a r√©ussi
      const successfulUpdates = results.filter(result => !result.error);
      if (successfulUpdates.length === 0) {
        throw new Error('Tous les updates concurrents ont √©chou√©');
      }

      // V√©rifier l'√©tat final
      const { data: finalState, error: finalError } = await supabase
        .from('rooms')
        .select('*')
        .eq('id', created.id)
        .single();

      if (finalError) throw new Error(`Erreur lecture √©tat final: ${finalError.message}`);

      // V√©rifier l'int√©grit√© finale
      const integrity = await DataConsistencyTestUtils.validateRoomIntegrity(finalState.id);
      if (!integrity.valid) {
        throw new Error(`Int√©grit√© finale √©chou√©e: ${integrity.issues.join(', ')}`);
      }

      // V√©rifier que l'√©tat final correspond √† un des updates
      const finalPrice = finalState.prix;
      const validPrices = updates.map(u => u.prix);
      if (!validPrices.includes(finalPrice)) {
        throw new Error(`Prix final incoh√©rent: ${finalPrice}`);
      }
    } finally {
      await supabase.from('rooms').delete().eq('id', created.id);
    }
  }

  static async testUpdatePartialConsistency() {
    const roomData = DataConsistencyTestUtils.generateTestRoom('-partial');
    const { data: created, error: createError } = await supabase
      .from('rooms')
      .insert(roomData)
      .select()
      .single();

    if (createError) throw new Error(`Erreur cr√©ation: ${createError.message}`);

    try {
      // Update partiel - seulement quelques champs
      const partialUpdate = {
        prix: 175.50,
        notes: 'Mise √† jour partielle'
      };

      const { data: updated, error: updateError } = await supabase
        .from('rooms')
        .update(partialUpdate)
        .eq('id', created.id)
        .select()
        .single();

      if (updateError) throw new Error(`Erreur update partiel: ${updateError.message}`);

      // V√©rifier que seuls les champs sp√©cifi√©s ont chang√©
      if (updated.prix !== partialUpdate.prix) {
        throw new Error('Prix non mis √† jour');
      }

      if (updated.notes !== partialUpdate.notes) {
        throw new Error('Notes non mises √† jour');
      }

      // V√©rifier que les autres champs sont pr√©serv√©s
      if (updated.numero !== created.numero) {
        throw new Error('Numero modifi√© lors d\'update partiel');
      }

      if (updated.type !== created.type) {
        throw new Error('Type modifi√© lors d\'update partiel');
      }

      if (updated.statut !== created.statut) {
        throw new Error('Statut modifi√© lors d\'update partiel');
      }

      // V√©rifier que les donn√©es complexes sont pr√©serv√©es
      if (JSON.stringify(updated.amenities) !== JSON.stringify(created.amenities)) {
        throw new Error('Amenities modifi√©es lors d\'update partiel');
      }

      if (JSON.stringify(updated.images) !== JSON.stringify(created.images)) {
        throw new Error('Images modifi√©es lors d\'update partiel');
      }
    } finally {
      await supabase.from('rooms').delete().eq('id', created.id);
    }
  }
}

/**
 * RUNNER PRINCIPAL POUR LES TESTS DE COH√âRENCE
 */
class DataConsistencyTestRunner {
  static async runAllConsistencyTests() {
    console.log('\nüîó D√âBUT DES TESTS DE COH√âRENCE DES DONN√âES - API ROOMS');
    console.log('======================================================');
    
    const startTime = Date.now();
    const results = {
      create: null,
      update: null,
      summary: {
        totalPassed: 0,
        totalFailed: 0,
        duration: 0,
        consistencyMetrics: {}
      }
    };

    try {
      // Tests de coh√©rence CREATE
      results.create = await CreateConsistencyTests.runAll();
      
      // Tests de coh√©rence UPDATE
      results.update = await UpdateConsistencyTests.runAll();

      // Calcul du r√©sum√©
      const endTime = Date.now();
      results.summary.duration = endTime - startTime;
      results.summary.totalPassed = results.create.passed + results.update.passed;
      results.summary.totalFailed = results.create.failed + results.update.failed;

      // Validation finale de la coh√©rence globale
      results.summary.consistencyMetrics = await this.validateGlobalConsistency();

    } catch (error) {
      DataConsistencyTestUtils.log('CONS-RUNNER', `Erreur fatale: ${error.message}`, 'error');
      results.summary.fatalError = error.message;
    }

    this.displayConsistencyResults(results);
    return results;
  }

  static async validateGlobalConsistency() {
    try {
      const hotelConsistency = await DataConsistencyTestUtils.validateHotelRoomsConsistency(TEST_CONFIG.testHotelId);
      
      return {
        hotelConsistency: hotelConsistency.valid,
        hotelIssues: hotelConsistency.issues,
        roomCount: hotelConsistency.roomCount
      };
    } catch (error) {
      return {
        hotelConsistency: false,
        error: error.message
      };
    }
  }

  static displayConsistencyResults(results) {
    console.log('\nüìä R√âSULTATS DES TESTS DE COH√âRENCE');
    console.log('====================================');
    
    const operations = ['create', 'update'];
    const operationNames = ['CREATE-CONS', 'UPDATE-CONS'];
    
    operations.forEach((op, index) => {
      if (results[op]) {
        const { passed, failed } = results[op];
        const total = passed + failed;
        const rate = total > 0 ? ((passed / total) * 100).toFixed(1) : '0.0';
        console.log(`${operationNames[index].padEnd(12)} ${passed}/${total} (${rate}%) üîó`);
        
        if (failed > 0 && results[op].details) {
          results[op].details.forEach(detail => {
            console.log(`  ‚ùå ${detail.test}: ${detail.error}`);
          });
        }
      }
    });

    console.log('\nüìà M√âTRIQUES DE COH√âRENCE GLOBALES');
    const metrics = results.summary.consistencyMetrics;
    if (metrics) {
      console.log(`Coh√©rence h√¥tel: ${metrics.hotelConsistency ? '‚úÖ' : '‚ùå'}`);
      if (metrics.roomCount !== undefined) {
        console.log(`Nombre de chambres: ${metrics.roomCount}`);
      }
      if (metrics.hotelIssues && metrics.hotelIssues.length > 0) {
        console.log(`Probl√®mes d√©tect√©s: ${metrics.hotelIssues.join(', ')}`);
      }
      if (metrics.error) {
        console.log(`Erreur validation globale: ${metrics.error}`);
      }
    }

    console.log(`\nDur√©e totale des tests: ${results.summary.duration}ms`);
    console.log(`Tests r√©ussis: ${results.summary.totalPassed}`);
    console.log(`Tests √©chou√©s: ${results.summary.totalFailed}`);
    console.log(`Taux de coh√©rence: ${(results.summary.totalPassed / (results.summary.totalPassed + results.summary.totalFailed) * 100).toFixed(1)}%`);

    if (results.summary.fatalError) {
      console.log(`üö® ERREUR FATALE: ${results.summary.fatalError}`);
    }

    console.log('\nüîó TESTS DE COH√âRENCE TERMIN√âS');
  }
}

// Lancement des tests si ex√©cut√© directement
if (require.main === module) {
  DataConsistencyTestRunner.runAllConsistencyTests()
    .then(() => process.exit(0))
    .catch(error => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = {
  DataConsistencyTestRunner,
  CreateConsistencyTests,
  UpdateConsistencyTests,
  DataConsistencyTestUtils
};