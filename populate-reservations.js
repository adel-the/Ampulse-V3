const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// Lire la configuration
const config = JSON.parse(fs.readFileSync('mcp-supabase-config.json', 'utf8'));

const supabase = createClient(
  config.supabase.url,
  config.supabase.service_role_key
);

const populateReservations = async () => {
  console.log('üéØ MISSION: Peupler la table reservations existante');
  console.log('==================================================');

  try {
    // 1. V√©rifier que la table existe et est vide
    console.log('1. üîç V√©rification √©tat actuel...');
    const { data: existingData, error: checkError, count } = await supabase
      .from('reservations')
      .select('*', { count: 'exact' });
    
    if (checkError) {
      console.error('‚ùå Erreur v√©rification:', checkError.message);
      return false;
    }
    
    console.log(`‚úÖ Table reservations existe avec ${count} enregistrements`);
    
    if (count > 0) {
      console.log('üìä Donn√©es existantes:');
      existingData.forEach(res => {
        console.log(`   ${res.numero || res.id} - ${res.client_nom} ${res.client_prenom}`);
      });
    }

    // 2. Ins√©rer les donn√©es de test
    console.log('\n2. üìä Insertion des r√©servations de test...');
    
    const testReservations = [
      {
        numero: 'RES-2024-000001',
        hotel_id: 1,
        client_nom: 'Martin',
        client_prenom: 'Jean',
        client_email: 'jean.martin@email.fr',
        client_telephone: '0612345678',
        date_arrivee: '2024-08-20',
        date_depart: '2024-08-25',
        nombre_personnes: 2,
        statut: 'CONFIRMEE',
        prix_total: 275.00,
        prix_par_nuit: 55.00,
        source_reservation: 'operateur_social',
        notes: 'Placement social d\'urgence'
      },
      {
        numero: 'RES-2024-000002',
        hotel_id: 2,
        client_nom: 'Dupont',
        client_prenom: 'Marie',
        client_email: 'marie.dupont@email.fr',
        client_telephone: '0698765432',
        date_arrivee: '2024-08-22',
        date_depart: '2024-08-24',
        nombre_personnes: 1,
        statut: 'EN_COURS',
        prix_total: 130.00,
        prix_par_nuit: 65.00,
        source_reservation: 'direct',
        notes: 'S√©jour professionnel'
      },
      {
        numero: 'RES-2024-000003',
        hotel_id: 1,
        client_nom: 'Bernard',
        client_prenom: 'Pierre',
        client_email: 'pierre.bernard@email.fr',
        client_telephone: '0634567890',
        date_arrivee: '2024-08-25',
        date_depart: '2024-08-30',
        nombre_personnes: 3,
        statut: 'EN_ATTENTE',
        prix_total: 340.00,
        prix_par_nuit: 68.00,
        source_reservation: 'operateur_social',
        notes: 'Famille en situation pr√©caire'
      },
      {
        numero: 'RES-2024-000004',
        hotel_id: 2,
        client_nom: 'Moreau',
        client_prenom: 'Sophie',
        client_email: 'sophie.moreau@email.fr',
        client_telephone: '0687654321',
        date_arrivee: '2024-08-18',
        date_depart: '2024-08-23',
        nombre_personnes: 2,
        statut: 'TERMINEE',
        prix_total: 300.00,
        prix_par_nuit: 60.00,
        source_reservation: 'telephone',
        notes: 'S√©jour termin√© avec satisfaction'
      },
      {
        numero: 'RES-2024-000005',
        hotel_id: 1,
        client_nom: 'Leroy',
        client_prenom: 'Antoine',
        client_email: 'antoine.leroy@email.fr',
        client_telephone: '0656789012',
        date_arrivee: '2024-08-28',
        date_depart: '2024-09-02',
        nombre_personnes: 1,
        statut: 'CONFIRMEE',
        prix_total: 325.00,
        prix_par_nuit: 65.00,
        source_reservation: 'en_ligne',
        notes: 'R√©servation via site web'
      }
    ];

    // Ins√©rer les r√©servations une par une pour mieux g√©rer les erreurs
    let insertedCount = 0;
    for (let i = 0; i < testReservations.length; i++) {
      const reservation = testReservations[i];
      console.log(`   Insertion ${i + 1}/${testReservations.length}: ${reservation.numero}...`);
      
      try {
        const { data, error } = await supabase
          .from('reservations')
          .insert(reservation);
        
        if (error) {
          console.log(`   ‚ö†Ô∏è ${reservation.numero}: ${error.message}`);
          
          // Si le num√©ro existe d√©j√†, essayer un UPDATE
          if (error.message.includes('duplicate key') || error.message.includes('already exists')) {
            console.log(`   üîÑ Tentative UPDATE pour ${reservation.numero}...`);
            const { data: updateData, error: updateError } = await supabase
              .from('reservations')
              .update(reservation)
              .eq('numero', reservation.numero);
            
            if (!updateError) {
              console.log(`   ‚úÖ ${reservation.numero} mis √† jour`);
              insertedCount++;
            } else {
              console.log(`   ‚ùå ${reservation.numero} UPDATE √©chou√©: ${updateError.message}`);
            }
          }
        } else {
          console.log(`   ‚úÖ ${reservation.numero} ins√©r√©`);
          insertedCount++;
        }
      } catch (err) {
        console.log(`   ‚ùå ${reservation.numero} erreur: ${err.message}`);
      }
    }

    console.log(`\n‚úÖ ${insertedCount}/${testReservations.length} r√©servations trait√©es`);

    // 3. V√©rification finale
    console.log('\n3. üîç V√©rification finale...');
    
    const { data: finalData, error: finalError, count: finalCount } = await supabase
      .from('reservations')
      .select('numero, client_nom, client_prenom, statut, date_arrivee, prix_total', { count: 'exact' })
      .order('created_at', { ascending: false });
    
    if (finalError) {
      console.error('‚ùå Erreur v√©rification finale:', finalError.message);
      return false;
    }
    
    console.log(`‚úÖ Total final: ${finalCount} r√©servations`);
    console.log('üìã R√©servations dans la base:');
    finalData.forEach(res => {
      console.log(`   ${res.numero} - ${res.client_nom} ${res.client_prenom} - ${res.statut} - ${res.prix_total}‚Ç¨`);
    });

    // 4. Test de requ√™te complexe
    console.log('\n4. üß™ Test requ√™te complexe...');
    
    const { data: testQuery, error: testError } = await supabase
      .from('reservations')
      .select('numero, client_nom, statut, prix_total')
      .eq('statut', 'CONFIRMEE')
      .order('prix_total', { ascending: false });
    
    if (testError) {
      console.log('‚ùå Requ√™te complexe √©chou√©e:', testError.message);
    } else {
      console.log('‚úÖ Requ√™te complexe r√©ussie');
      console.log('üìä R√©servations CONFIRMEE par prix d√©croissant:');
      testQuery.forEach(res => {
        console.log(`   ${res.numero} - ${res.client_nom} - ${res.prix_total}‚Ç¨`);
      });
    }

    console.log('\nüéØ R√âSUM√â FINAL:');
    console.log('================');
    console.log('‚úÖ Table reservations existe et fonctionne');
    console.log(`‚úÖ ${finalCount} r√©servations disponibles`);
    console.log('‚úÖ Requ√™tes SELECT avec ORDER BY fonctionnent');
    console.log('‚úÖ Requ√™tes avec filtres fonctionnent');
    console.log('\nüéâ SUCC√àS COMPLET! Plus d\'erreur 404 pour reservations!');
    
    return true;

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    return false;
  }
};

// Ex√©cution
populateReservations().catch(console.error);