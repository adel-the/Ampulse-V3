// Script de debug pour tester la cr√©ation de t√¢ches de maintenance
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://iqrqhzgtjhizvfyiuhao.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY manquante');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testMaintenanceTaskCreation() {
  console.log('üîß Test de cr√©ation de t√¢che de maintenance...\n');

  // Test 1: Cr√©er une t√¢che avec les donn√©es exactes du formulaire
  const testTaskData = {
    titre: 'Test cr√©ation t√¢che DEBUG',
    description: 'Test de cr√©ation depuis le script de debug',
    priorite: 'moyenne', // Valeur correcte pour la base de donn√©es
    responsable: 'Debug User',
    date_echeance: '2025-09-03',
    notes: 'Cr√©√© depuis script de debug',
    room_id: 1,
    hotel_id: 1,
    user_owner_id: 'c8c827c4-419f-409c-a696-e6bf0856984b',
    created_by: 'c8c827c4-419f-409c-a696-e6bf0856984b',
    statut: 'en_attente',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };

  try {
    console.log('üìù Donn√©es de test:', JSON.stringify(testTaskData, null, 2));
    
    const { data, error } = await supabase
      .from('maintenance_tasks')
      .insert(testTaskData)
      .select(`
        *,
        room:rooms(numero, bed_type),
        hotel:hotels(nom)
      `)
      .single();

    if (error) {
      console.error('‚ùå Erreur lors de la cr√©ation:', error);
      console.error('Code:', error.code);
      console.error('Details:', error.details);
      console.error('Hint:', error.hint);
      console.error('Message:', error.message);
    } else {
      console.log('‚úÖ T√¢che cr√©√©e avec succ√®s:');
      console.log('ID:', data.id);
      console.log('Titre:', data.titre);
      console.log('Statut:', data.statut);
      console.log('Priorit√©:', data.priorite);
    }
  } catch (err) {
    console.error('‚ùå Exception lors de la cr√©ation:', err);
  }

  // Test 2: V√©rifier les contraintes de priorit√©
  console.log('\nüîß Test des contraintes de priorit√©...');
  
  const priorityTests = ['faible', 'moyenne', 'haute', 'urgente', 'invalide'];
  
  for (const priorite of priorityTests) {
    try {
      const testData = {
        ...testTaskData,
        titre: `Test priorit√© ${priorite}`,
        priorite: priorite
      };
      
      const { data, error } = await supabase
        .from('maintenance_tasks')
        .insert(testData)
        .select('id, titre, priorite')
        .single();

      if (error) {
        console.log(`‚ùå Priorit√© '${priorite}': ${error.message}`);
      } else {
        console.log(`‚úÖ Priorit√© '${priorite}': OK (ID: ${data.id})`);
      }
    } catch (err) {
      console.log(`‚ùå Priorit√© '${priorite}': Exception - ${err.message}`);
    }
  }

  // Test 3: V√©rifier les contraintes de statut
  console.log('\nüîß Test des contraintes de statut...');
  
  const statusTests = ['en_attente', 'en_cours', 'terminee', 'annulee', 'invalide'];
  
  for (const statut of statusTests) {
    try {
      const testData = {
        ...testTaskData,
        titre: `Test statut ${statut}`,
        statut: statut
      };
      
      const { data, error } = await supabase
        .from('maintenance_tasks')
        .insert(testData)
        .select('id, titre, statut')
        .single();

      if (error) {
        console.log(`‚ùå Statut '${statut}': ${error.message}`);
      } else {
        console.log(`‚úÖ Statut '${statut}': OK (ID: ${data.id})`);
      }
    } catch (err) {
      console.log(`‚ùå Statut '${statut}': Exception - ${err.message}`);
    }
  }

  // Test 4: V√©rifier l'existence des r√©f√©rences room_id et hotel_id
  console.log('\nüîß Test des r√©f√©rences foreign key...');
  
  try {
    const { data: rooms } = await supabase
      .from('rooms')
      .select('id, numero, hotel_id')
      .limit(5);
    
    console.log('üè® Chambres disponibles:', rooms?.map(r => `ID: ${r.id}, Num√©ro: ${r.numero}, H√¥tel: ${r.hotel_id}`));
    
    const { data: hotels } = await supabase
      .from('hotels')
      .select('id, nom')
      .limit(5);
    
    console.log('üè® H√¥tels disponibles:', hotels?.map(h => `ID: ${h.id}, Nom: ${h.nom}`));
  } catch (err) {
    console.error('‚ùå Erreur lors de la v√©rification des r√©f√©rences:', err);
  }

  console.log('\n‚ú® Tests termin√©s');
}

testMaintenanceTaskCreation().catch(console.error);